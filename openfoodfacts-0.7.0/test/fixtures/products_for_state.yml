---
http_interactions:
- request:
    method: get
    uri: https://world.openfoodfacts.org/facets/states/photos-uploaded/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.18.0
      Date:
      - Sun, 15 Jun 2025 21:04:04 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Sat, 14 Jun 2025 21:04:02 GMT
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Xss-Protection:
      - 1; mode=block
      X-Request-Id:
      - cvRWX2UBEsFWUdRZ
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!-- start templates/web/common/site_layout.tt.html -->

<!doctype html>
<html class="no-js" lang="en" data-serverdomain="openfoodfacts.org" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>Photos uploaded</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta property="fb:app_id" content="219331381518041">
    <meta property="og:type" content="food">
    <meta property="og:title" content="Photos uploaded">
    <meta property="og:url" content="https://world.openfoodfacts.org/facets/states/en:photos-uploaded/1">
    
    <meta property="og:image" content="https://static.openfoodfacts.org/images/logos/off-logo-vertical-white-social-media-preview.png">
    <meta property="og:description" content="A collaborative, free and open database of ingredients, nutrition facts and information on food products from around the world">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/off/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/off/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/off/favicon-16x16.png">
<link rel="manifest" href="/images/favicon/off/site.webmanifest">
<link rel="mask-icon" href="/images/favicon/off/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/images/favicon/off/favicon.ico">
<meta name="msapplication-TileColor" content="#00aba9">
<meta name="msapplication-config" content="/images/favicon/off/browserconfig.xml">
<meta name="theme-color" content="#ffffff">

	<meta name="apple-itunes-app" content="app-id=588797948">
    <link rel="canonical" href="https://world.openfoodfacts.org/facets/states/en:photos-uploaded/1">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/app-ltr.css?v=1749629930" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/jqueryui/themes/base/jquery-ui.css" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/select2.min.css">
    <link rel="search" href="https://world.openfoodfacts.org/cgi/opensearch.pl" type="application/opensearchdescription+xml" title="Open Food Facts">
    <script type="module" src="https://static.openfoodfacts.org/js/dist/off-webcomponents.bundled.js"></script>
	
    <style media="all">
        .show-when-no-access-to-producers-platform {display:none}
.show-when-logged-in {display:none}

		
		.badge-container{
			margin: 0 auto;
		}

		.badge-container img{
			margin: 5px;
		}
		@media only screen and (max-width: 537px ) and (min-width: 280px) {
			.badge-container{
				width: 280px;
			}
		}
		@media only screen and (max-width: 279px ){
			.badge-container{
				width: 130px;
			}
		}
    </style>
</head>
<body class="products_page">

	<!-- Matomo -->
<script>
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.openfoodfacts.org"]);
  _paq.push(["setDomains", ["*.openfoodfacts.org"]]);
  _paq.push(["setDoNotTrack", true]);
  _paq.push(["disableCookies"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//analytics.openfoodfacts.org/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '5']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//analytics.openfoodfacts.org/matomo.php?idsite=5&amp;rec=1" style="border:0;" alt="" /></p></noscript>
<!-- End Matomo Code -->



	
	<div class="skip"><a href="#content" tabindex="0">Skip to Content</a></div>
	

	<div id="barcode-scanner-modal" class="modal is_hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <span><h2>Scan a product<h2></span>
      <button class="modal-close-button">&times;</button>
    </div>
    <div>
      <barcode-scanner id="barcode-scanner"></barcode-scanner>
    </div>
    <div>
    </div>
    <div >
      <label for="barcode-modal-input">Or enter barcode manually</label>
      <div class="barcode-modal-group">
        <input type="text" id="barcode-modal-input" class="barcode-modal-input" inputmode="numeric" pattern="\d*" />
        <button class="barcode-modal-button button" id="barcode-modal-button" disabled>Scan</button>
      </div>
    </div>
  </div>
</div>

<script src="https://static.openfoodfacts.org/js/dist/barcode-scanner.js"></script>


	<div id="page">
		
		<div class="upper-nav contain-to-grid"  id="upNav">
			<nav class="top-bar " data-topbar role="navigation">
				
				<section class="top-bar-section">
					
					<!-- Left Nav Section -->
					<ul class="left">

						<li class="has-dropdown">
							<a id="menu_link">
								<span class="material-icons">
									menu
								</span>
							</a>
							<ul class="dropdown">				
								
									<li><a href="/discover">Discover</a></li>
									<li><a href="/contribute">Contribute</a></li>
									<li class="divider"></li>
									<li><label>Add products</label></li>
                <!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
									<li><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=pro_platform_install_the_app_to_add_products_en">Install the app to add products</a></li>
									<li><a href="/cgi/product.pl?type=search_or_add&action=display">Add a product</a></li>
								

								<li class="divider"></li>
								<li><label>Search and analyze products</label></li>

								<li>
									<a href="/cgi/search.pl">Advanced search</a>
								</li>
								<li>
									<a href="/cgi/search.pl?graph=1">Graphs and maps</a>
								</li>
								
							</ul>
						</li>
						
						<li>
							<ul class="country_language_selection">
								<li class="has-form has-dropdown" id="select_country_li">
									<select id="select_country" style="width:100%" data-placeholder="Country">
										<option></option>
									</select>
								</li>
								<li class="has-dropdown">
									<a href="https://world.openfoodfacts.org/">English</a>

									<ul class="dropdown">
										
									</ul>
								</li>
							</ul>
						</li>
					</ul>


					<!-- Right Nav Section -->
					
					<ul class="right">
						
							<li class="h-space-tiny has-form">
								<a href="/cgi/session.pl" class="round button secondary">
									<span class="material-icons material-symbols-button">account_circle</span>
									Sign in
								</a>
							</li>
						
					</ul>
				</section>
			</nav>
		</div>
		

		<div id="main_container" style="position:relative" class="block_latte">
		
		
		<div class="topbarsticky">
			<div class="contain-to-grid " id="offNav" >
				<nav class="top-bar" data-topbar role="navigation" >

					<ul class="title-area">
						<li class="name">
							<div style="position:relative;max-width:292px;">
								<a href="/">
								<img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;">
								
							</a>
							</div>
						</li>
					</ul>

					
					
					<section class="top-bar-section">
					
						<ul class="left small-4">
							<li class="search-li">
							
								<form action="/cgi/search.pl">
								<div class="row"><div class="small-12">
								<div class="row collapse postfix-round">
									<div class="columns">
									<input type="text" placeholder="Search for a product" name="search_terms" value="" style="background-color:white">
									<input name="search_simple" value="1" type="hidden">
									<input name="action" value="process" type="hidden">
									</div>
									<div class="columns postfix-button-wrapper">
									<button type="submit" title="Search" class="button postfix" style="line-height:normal"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
									</div>
									<div class="columns postfix-button-wrapper is_hidden">
  <button
    type="button"
    title="Scan a product"
    class="button barcode-scanner-button"
    id="barcode-scanner-button"
  >
    <svg style="width:24px;height:24px" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M2,6H4V18H2V6M5,6H6V18H5V6M7,6H10V18H7V6M11,6H12V18H11V6M14,6H16V18H14V6M17,6H20V18H17V6M21,6H22V18H21V6Z"/></svg>
  </button>

  <script src="https://static.openfoodfacts.org/js/dist/barcode-scanner-button.js"></script>
</div>

								</div>
								</div></div>
								</form>
							</li>
						</ul>
					<ul class="search_and_links">
						<li><a href="/discover" class="top-bar-links">Discover</a></li>
						<li><a href="/contribute" class="top-bar-links">Contribute</a></li>
						<li class="show-for-xlarge-up"><a href="https://world.pro.openfoodfacts.org/" class="top-bar-links">Producers</a></li>
						<li class="flex-grid getapp"><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=search_and_links_promo_en" class="buttonbar button" style="top:0;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <span class="bt-text">Get the app</span></a></li>
				<!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
          </ul>
					</section>
					
				</nav>
			</div>
		</div>

	
	
		<nav class="tab-bar hide">
			<div class="left-small">
				<a href="#idOfLeftMenu" role="button" aria-controls="idOfLeftMenu" aria-expanded="false" class="left-off-canvas-toggle button postfix anonymous">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
				</a>
			</div>
			<div class="middle tab-bar-section">
				<form action="/cgi/search.pl">
					<div class="row collapse">
						<div class="small-8 columns">
							<input type="text" placeholder="Search for a product" name="search_terms">
							<input name="search_simple" value="1" type="hidden">
							<input name="action" value="process" type="hidden">
						</div>
						<div class="small-2 columns">
							<button type="submit" class="button postfix"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
						</div>
						<div class="small-2 columns">
							<a href="/cgi/search.pl" title="Advanced search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg></a>
						</div>
					</div>
				</form>
			</div>
		</nav>
		

		<div id="content" class="off-canvas-wrap block_latte" data-offcanvas>
			<div class="inner-wrap">
			
				<a class="exit-off-canvas"></a>

				
				
				<!-- full width banner on mobile -->
				
				

				

				<div class="main block_light">
					<div id="main_column">

						
						
							
							
								<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

								

<section id="donation-banner-top" class="donation-banner row">
  <div class="donation-banner__left-aside">
    <div class="donation-banner__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div class="donation-banner__aside">
      <div class="donation-banner__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <div style="padding:1rem;">
        <p>Your donations fund the day-to-day operations of our non-profit association:</p>
        <ul>
          <li>
            keeping our database open & available to all,
            <ul>
              <li>technical infrastructure (website/mobile app) & a small permanent team</li>
            </ul>
          </li>
          <li>
            <p>remain independent of the food industry,</p>
          </li>
          <li>
            <p>engage a community of committed citizens,</p>
          </li>
          <li>
            <p>support the advancement of public health research.</p>
          </li>
        </ul>
      </div>
    </div>
    <div class="donation-banner__actions-section">
      <div class="donation-banner__actions-section__financial">
        <p>
          
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
          
        </p>
      </div>
      <div class="donation-banner__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
  <div class="donation-banner__close">
    <button id="hide-donate-banner" class="material-icons modest" onclick="DonationButton();" onkeypress="DonationButton();">close</button>
  </div>
</section>

<script>
  let d = new Date();
  let bannerID = document.getElementById('donation-banner-top');
  let getDomain = window.location.origin.split('.');

  function setBannerCookie(bcname, bcval, bcexdays) {
    d.setTime(d.getTime() + (bcexdays*60*60*24*1000));
    let expires = 'expires=' + d.toUTCString();
    // Apply cookie for every domain contains open...facts
    let domain = 'domain=.' + getDomain.slice(1).join('.');
    document.cookie = bcname + '=' + bcval + ';' + expires + ';' + domain + ';SameSite=None;Secure;path=/';
  }

  function getBannerCookie(bcname) {
    const name = bcname + '=';
    const decodedCookies = decodeURIComponent(document.cookie);
    const cookies = decodedCookies.split(';');
    for (const cookie of cookies) {
      let c = cookie;
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
    }

    return '';
  }

  function DonationButton() {
    setBannerCookie('off_donation_banner_2024_a', 1, 180);
    bannerID.style.display = 'none';
  }

  if (getBannerCookie('off_donation_banner_2024_a') !== '') {
    bannerID.style.display = 'none';
  } else {
    bannerID.style.display = 'flex';
  }
</script>


							
						
						
            			
						
							
								<!-- some lists of products for facets (e.g. brands) have microformats data -->
								<div itemscope itemtype="https://schema.org/Thing">
									<div class="row">
										<div class="small-12 column v-space-short">
											<h1 itemprop="name">Photos uploaded</h1>
										</div>
									</div>
								  <!-- start templates/web/pages/tag/tag.tt.html -->
<div class="tag">
    <div class="row">
        <div class="large-6 column">

            <div class="tag_navigation">
                
                    <a href="/facets/states">State</a>:
                    <a href="/facets/states/photos-uploaded">Photos uploaded</a>
                    
                
            </div>

            

                

                

                

                

                

                

            

            

            
        </div>

        
            

            <div class="large-6 column">                
            <!-- injecting facet-knowledge-panel -->
            <div id="facet-knowledge-panel" style="margin-left: 70px; z-index: 1;">
                <h2 id="facet_panels_title"></h2>
                <div id="facet_panels_content"></div>
            </div>
            <!-- Fetching facet knowledge panel -->                
            <script>
                    let facet_kp = "https://facets-kp.openfoodfacts.org/render-to-html";
                    let params = "?facet_tag=states&value_tag=en:photos-uploaded";
                    if ("") {
                        params += "&sec_facet_tag=&sec_value_tag="
                    }

                    // Adding language code to get translated data
                    params += "&lang_code=en&country=world";

                    fetch(facet_kp + params)
                        .then((response) => {
                            if (response.ok) {
                                return response.text();
                            }
                            else {
                                throw new Error("Network Response Error while fetching facet kp");

                            }
                        })
                        .then(data => {
                            let title = document.getElementById("facet_panels_title");
                            title.innerHTML = "Facet knowledge panel";
                            let knowledgepanel = document.getElementById("facet_panels_content");
                            knowledgepanel.innerHTML = data;
                            // Keeping Hungergames and Lastedits panel open by default
                            jQuery("#HungerGames").attr("open", true);
                            jQuery("#LastEdits").attr("open", true);

                        })
                </script>
            </div>
            
        
    </div>
</div>

<!-- end templates/web/pages/tag/tag.tt.html -->
<!-- start templates/web/common/includes/list_of_products.tt.html --> 

<div class="row">
  <div class="small-12 columns"> 
    
    
      
      
      
      <!-- display a permalink if the url is for a script that may have POST parameters -->
      
    
    
  </div>
</div>

 

<div class="block short block_ristreto">
  <div class="row">
    <div class="small-12 columns filterProducts">
      <div>
        <span class="filterProducts__results">
          <span class="material-icons" aria-hidden="true">search</span>
          3,046,890 products
        </span>
      </div>
      <div class="filterProducts__buttons">
        <div>
          <button href="#" data-dropdown="drop_sort" aria-controls="drop_sort" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">swap_vert</span>
            
          </button>
          <ul id="drop_sort" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/states/photos-uploaded?sort_by=popularity" onclick="$.cookie('last_sort_by', 'popularity', { expires: 180, path: '/' });">Most scanned products</a>
            </li>
        
            <li>
              <a href="/facets/states/photos-uploaded?sort_by=nutriscore_score" onclick="$.cookie('last_sort_by', 'nutriscore_score', { expires: 180, path: '/' });">Products with the best Nutri-Score</a>
            </li>
        
            <li>
              <a href="/facets/states/photos-uploaded?sort_by=environmental_score_score" onclick="$.cookie('last_sort_by', 'environmental_score_score', { expires: 180, path: '/' });">Products with the best Green-Score</a>
            </li>
        
            <li>
              <a href="/facets/states/photos-uploaded?sort_by=created_t" onclick="$.cookie('last_sort_by', 'created_t', { expires: 180, path: '/' });">Recently added products</a>
            </li>
        
            <li>
              <a href="/facets/states/photos-uploaded?sort_by=last_modified_t" onclick="$.cookie('last_sort_by', 'last_modified_t', { expires: 180, path: '/' });">Recently modified products</a>
            </li>
        
          </ul>
        </div>
        
        
        <div>
          <button href="#" data-dropdown="drop1" aria-controls="drop1" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">sort</span>
            Explore products by...
          </button>
          <ul id="drop1" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/states/photos-uploaded/countries" rel="nofollow">Countries</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/nutrition-grades" rel="nofollow">Nutrition grades</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/nova-groups" rel="nofollow">NOVA groups</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/environmental-score" rel="nofollow">Green-Score</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/brands" rel="nofollow">Brands</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/categories" rel="nofollow">Categories</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/labels" rel="nofollow">Labels</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/packaging" rel="nofollow">Packaging</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/origins" rel="nofollow">Origins of ingredients</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/manufacturing-places" rel="nofollow">Manufacturing or processing places</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/packager-codes" rel="nofollow">Traceability codes</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/ingredients" rel="nofollow">Ingredients</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/additives" rel="nofollow">Additives</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/vitamins" rel="nofollow">Added vitamins</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/minerals" rel="nofollow">Added minerals</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/amino-acids" rel="nofollow">Added amino acids</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/nucleotides" rel="nofollow">Added nucleotides</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/other-nutritional-substances" rel="nofollow">Other nutritional substances added</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/allergens" rel="nofollow">Allergens</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/traces" rel="nofollow">Traces</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/misc" rel="nofollow">Miscellaneous</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/languages" rel="nofollow">Languages</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/contributors" rel="nofollow">Contributors</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/states" rel="nofollow">States</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/data-sources" rel="nofollow">Data sources</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/entry-dates" rel="nofollow">Entry dates</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/last-edit-dates" rel="nofollow">Last edit dates</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/last-check-dates" rel="nofollow">Last check dates</a>
            </li>
          
            <li>
              <a href="/facets/states/photos-uploaded/teams" rel="nofollow">Teams</a>
            </li>
          
          </ul>
        </div>
        
        
      </div>
    </div>
  </div>
</div>


<div class="row">
	<div class="small-12 columns">
    <div id="preferences_selected" class="small-12 flex-grid v-space-short v-align-center direction-row full-width v-align-between"></div>
    <div id="preferences_selection_form" style="display:none"></div>
  </div>
</div>

	 
<div class="row">
<div class="large-12 columns">
    
    <div id="search_results" style="clear:left;">
        <ul class="products">
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
		</ul>
  </div>
      
    
	<ul id="pages" class="pagination"><li class="unavailable">Pages:</li><li class="current"><a href="">1</a></li><li><a href="/facets/states/photos-uploaded/2">2</a></li><li><a href="/facets/states/photos-uploaded/3">3</a></li><li><a href="/facets/states/photos-uploaded/4">4</a></li><li class="unavailable">&hellip;</li><li><a href="/facets/states/photos-uploaded/60936">60936</a></li><li><a href="/facets/states/photos-uploaded/60937">60937</a></li><li><a href="/facets/states/photos-uploaded/60938">60938</a></li><li><a href="/facets/states/photos-uploaded/2" rel="next$nofollow">Next</a></li><li class="unavailable">(50 products per page)</li></ul>

  </div>
</div>


<!-- end templates/web/common/includes/list_of_products.tt.html -->

								</div>
							
						
					</div>
				</div>
			</div>
		</div>
		</div>

		
		<footer>
			<div class="block_light bg-white" id="install_the_app_block">
				<div class="row">
					<div class="small-12 flex-grid v-space-short v-align-center direction-row h-space-tiny">
						<div class="cell small-100 medium-100 large-50 flex-grid v-align-center direction-row">
							<img class="cell small-50 v-align-center" src="/images/illustrations/app-icon-in-the-clouds.svg" alt="The Open Food Facts logo in the cloud" style="height:120px">
							<div class="cell small-50 v-align-center" id="footer_scan" style="display:block">
								<div id="footer_install_the_app">
									Install the app!
								</div>
								Scan your <span id="everyday">everyday</span> <span id="foods">foods</span>
							</div>
						</div>
						<div class="row">
							<div class="small-12 medium-12 large-12 v-space-normal column badge-container">
								<!-- android_app_link - https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner&hl=en -->
								<a  href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner&utm_source=off&utf_medium=web&utm_campaign=install_the_app_android_footer_en"><img src="/images/misc/playstore/img/latest/GetItOnGooglePlay_Badge_Web_color_English.svg" alt="Get It On Google Play" loading="lazy" height="40" width="120"></a>
								
								<a href="https://f-droid.org/packages/openfoodfacts.github.scrachx.openfood"><img src="/images/misc/f-droid/svg/get-it-on-en.svg" alt="Available on F-Droid" loading="lazy" height="40" width="120"></a>

								<!-- android_apk_app_link - https://world.openfoodfacts.org/images/apps/off.apk -->
								<a href="https://github.com/openfoodfacts/smooth-app/releases/latest?utm_source=off&utf_medium=web&utm_campaign=install_the_app_apk_footer_en"><img src="/images/misc/app-landing-page/download-apk/download-apk_en.svg" alt="Android APK" loading="lazy" height="40" width="120"></a>
								
								<!-- msgid "https://apps.apple.com/app/open-beauty-facts/id1122926380" -->
								<a href="https://apps.apple.com/app/open-food-facts/id588797948?utm_source=off&utf_medium=web&utm_campaign=install_the_app_ios_footer_en"><img src="/images/misc/appstore/black/appstore_US.svg" alt="Download on the App Store"  loading="lazy" height="40" width="120"></a>
							</div>
						</div>
					</div>
				</div>
			</div>

			
      			<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

				

<section class="donation-banner-footer row">
  <div class="donation-banner-footer__left-aside">
    <div class="donation-banner-footer__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div>
      <div class="donation-banner-footer__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner-footer__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <p>Your donations fund the day-to-day operations of our non-profit association:</p>
      <ul>
        <li>
          keeping our database open & available to all,
          <ul>
            <li>technical infrastructure (website/mobile app) & a small permanent team</li>
          </ul>
        </li>
        <li>
          <p>remain independent of the food industry,</p>
        </li>
        <li>
          <p>engage a community of committed citizens,</p>
        </li>
        <li>
          <p>support the advancement of public health research.</p>
        </li>
      </ul>
    </div>
    <div class="donation-banner-footer__actions-section">
      <div class="donation-banner-footer__actions-section__financial">
        <p>
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
        </p>
      </div>
      <div class="donation-banner-footer__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
</section>


			
      		
			<div class="block_light block_cappucino" id="contribute_and_discover_links_block">
				<div class="row">
					<div class="small-12 large-6 columns v-space-normal block_off">
						<h3 class="title-5 text-medium">Join the community</h3>
						<p>Discover our <a href="/code-of-conduct">Code of conduct</a></p>
						<p>Join us on <a href="https://slack.openfoodfacts.org">Slack</a></p>
						<p><a href="https://forum.openfoodfacts.org/">Forum</a></p>
						<p id="footer_social_icons">Follow us: 
							<a href="https://x.com/OpenFoodFacts"><img src="/images/icons/dist/x.svg" class="footer_social_icon" alt="x"></a>
							<a href="https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web"><img src="/images/icons/dist/facebook.svg" class="footer_social_icon" alt="Facebook"></a>
							<a href="https://www.instagram.com/open.food.facts/"><img src="/images/icons/dist/instagram.svg" class="footer_social_icon" alt="Instagram"></a>
							
						</p>
						<p><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></p>
					</div>
					<div class="small-12 large-6 columns project v-space-normal">
						<h3 class="title-5 text-medium">Discover the project</h3>
						<ul class="inline-list tags_links v-space-tiny h-space-tiny" >
							<li><a class="button small white-button radius" href="/who-we-are">Who we are</a></li>
							<li><a class="button small white-button radius" href="https://world.openfoodfacts.org/open-food-facts-vision-mission-values-and-programs">Vision, Mission, Values and Programs</a></li>
							<li><a class="button small white-button radius" href="https://support.openfoodfacts.org/help/en-gb">Frequently asked questions</a></li>
							<li><a class="button small white-button radius" href="https://blog.openfoodfacts.org/en/">Open Food Facts blog</a></li>
							<li><a class="button small white-button radius" href="/press">Press</a></li>
							<li><a class="button small white-button radius" href="https://wiki.openfoodfacts.org">Open Food Facts wiki (en)</a></li>
							<li><a class="button small white-button radius" href="/cgi/top_translators.pl">Translators</a></li>
							<li><a class="button small white-button radius" href="/partners">Partners</a></li>
							<li><a class="button small white-button radius" href="https://world.openbeautyfacts.org">Open Beauty Facts - Cosmetics</a></li>
							<li><a class="button small white-button radius" href="https://world.pro.openfoodfacts.org/">Open Food Facts for Producers</a></li>
						</ul>
					</div>
				</div>
			</div>

			<div class="block_off block_dark block_ristreto" id="footer_block">

				<div id="footer_block_image_banner_outside">
					<div id="footer_block_image_banner_outside2">

						<div class="row">

							<div class="small-12 text-center v-space-short h-space-large">
								<a href="/" style="font-size:1rem;"><img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-mono-white.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;"></a>

								<p>A collaborative, free and open database of food products from around the world.</p>
								
								<ul class="inline-list text-center text-small">
									<li><a href="/legal">Legal</a></li>
									<li><a href="/privacy">Privacy</a></li>
									<li><a href="/terms-of-use">Terms of use</a></li>
									<li><a href="/data">Data, API and SDKs</a></li>
									<li><a href="https://world.openfoodfacts.org/donate-to-open-food-facts">Donate to Open Food Facts</a></li>
									<li><a href="https://world.pro.openfoodfacts.org/">Producers</a></li>
									<li><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></li>
								</ul>
							</div>

						</div>

					</div>
				</div>
			</div>
		</footer>
		

	</div>

<script src="https://static.openfoodfacts.org/js/dist/modernizr.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery-ui.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/hc-sticky.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/display.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/stikelem.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/scrollNav.js"></script>
  

<script>
$(function() {
display_user_product_preferences("#preferences_selected", "#preferences_selection_form", function () {
	rank_and_display_products("#search_results", products, contributor_prefs);
});
rank_and_display_products("#search_results", products, contributor_prefs);


});
</script>



<script src="https://static.openfoodfacts.org/js/dist/foundation.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.cookie.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/select2.min.js"></script>
<script type="text/javascript">
var page_type = "products";
var default_preferences = {"ecoscore":"important","nova":"important","nutriscore":"very_important"};
var preferences_text = "Classify the 50 products below according to your preferences";
var contributor_prefs = {"display_barcode":null,"edit_link":null};
var products = [
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035000430",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/0430/front_en.104.200.jpg",
      "product_display_name":"Sidi Ali – 33 cl",
      "url":"https://world.openfoodfacts.org/product/6111035000430/sidi-ali"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "description_short":"3 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":80,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":72,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111242100992",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/210/0992/front_fr.106.200.jpg",
      "product_display_name":"Perly – Jaouda – 80.0",
      "url":"https://world.openfoodfacts.org/product/6111242100992/perly-jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.065 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":91.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035002175",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/2175/front_fr.104.200.jpg",
      "product_display_name":"Sidi Ali – 2 L",
      "url":"https://world.openfoodfacts.org/product/6111035002175/sidi-ali"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.065 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":91.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035000058",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/0058/front_en.74.200.jpg",
      "product_display_name":"Sidi Ali mineral water – Les Eaux Minérales d'oulmès – 1,5 L",
      "url":"https://world.openfoodfacts.org/product/6111035000058/sidi-ali-mineral-water-les-eaux-minerales-d-oulmes"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.000508 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.9322666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111252421568",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/125/242/1568/front_en.46.200.jpg",
      "product_display_name":"Aquafina 33cl – pepsi – 33cl",
      "url":"https://world.openfoodfacts.org/product/6111252421568/aquafina-33cl-pepsi"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":65.75,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.225 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":85,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":90,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":86.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111266962187",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/126/696/2187/front_fr.56.200.jpg",
      "product_display_name":"Lait – Jaouda – 450 ml",
      "url":"https://world.openfoodfacts.org/product/6111266962187/lait-jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.0525 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":93,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3274080005003",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/327/408/000/5003/front_en.797.200.jpg",
      "product_display_name":"CRISTALINE Eau De Source 1.5L – 1500 ml",
      "url":"https://world.openfoodfacts.org/product/3274080005003/cristaline-eau-de-source-1-5l"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":82.3571428571429,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegan.svg",
                  "id":"vegan",
                  "match":50,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:maybe-vegan",
                  "status":"known",
                  "title":"Maybe vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":76,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111246721261",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/672/1261/front_en.14.200.jpg",
      "product_display_name":"Fromage blanc nature – MILKY FOOD PROFESSIONAL – 1kg",
      "url":"https://world.openfoodfacts.org/product/6111246721261/fromage-blanc-nature-milky-food-professional"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":63.375,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"3 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":80,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":44,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111242101180",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/210/1180/front_fr.69.200.jpg",
      "product_display_name":"Lait entier UHT – Jaouda – 1L",
      "url":"https://world.openfoodfacts.org/product/6111242101180/lait-entier-uht-jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781208481",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/120/8481/front_en.3.200.jpg",
      "product_display_name":"La vache qui rit",
      "url":"https://world.openfoodfacts.org/product/3073781208481/la-vache-qui-rit"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"59476931",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/005/947/6931/front_ro.8.200.jpg",
      "product_display_name":"covalact smantana 20% 140g",
      "url":"https://world.openfoodfacts.org/product/59476931/covalact-smantana-20-140g"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Fresh vegetables",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4311527561858",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/431/152/756/1858/front_de.4.200.jpg",
      "product_display_name":"Tomaten – Gut & Günstig – 500g",
      "url":"https://world.openfoodfacts.org/product/4311527561858/tomaten-gut-gunstig"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":85.0714285714286,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.01 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":90,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.3 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":96,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4750020050429",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/475/002/005/0429/front_lv.5.200.jpg",
      "product_display_name":"Cornetti rigatti – Dobele",
      "url":"https://world.openfoodfacts.org/product/4750020050429/cornetti-rigatti-dobele"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":7.04545454545455,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.52 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":69,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"35 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"19 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"en:peanuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":0,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Contains: Peanuts"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"12 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4000415778507",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/400/041/577/8507/front_en.3.200.jpg",
      "product_display_name":"Crunchy Peanut Butter Chocolate – Schogetten – 100 g",
      "url":"https://world.openfoodfacts.org/product/4000415778507/crunchy-peanut-butter-chocolate-schogetten"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"24 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8410087294049",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/841/008/729/4049/front_es.4.200.jpg",
      "product_display_name":"Muffins con pepitas de chocolate – Auchan",
      "url":"https://world.openfoodfacts.org/product/8410087294049/muffins-con-pepitas-de-chocolate-auchan"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8594003840180",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/859/400/384/0180/front_en.3.200.jpg",
      "product_display_name":"Citron – Jupí – 0,7 l",
      "url":"https://world.openfoodfacts.org/product/8594003840180/citron-jupi"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"30 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":10,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 29 ingredients (16 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5941143028832",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/594/114/302/8832/front_ro.22.200.jpg",
      "product_display_name":"Takis volcano –  – 55g",
      "url":"https://world.openfoodfacts.org/product/5941143028832/takis-volcano"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":96.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":98.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":20,
                  "name":"Gluten",
                  "status":"known",
                  "title":"May contain: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":69,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4306205816627",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/430/620/581/6627/front_de.3.200.jpg",
      "product_display_name":"Bio Datteln Getrocknet –  – 250 g",
      "url":"https://world.openfoodfacts.org/product/4306205816627/bio-datteln-getrocknet"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":83.7142857142857,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.35 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":77.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":97.3333333333333,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":72,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7066307373165",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/706/630/737/3165/front_de.3.200.jpg",
      "product_display_name":"Cannellini Bohnen – Dm – 400g",
      "url":"https://world.openfoodfacts.org/product/7066307373165/cannellini-bohnen-dm"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":12.2272727272727,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.49 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":70.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"21 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":19,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"11 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"42 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/7-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"7 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.98140625,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8690504063803",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/869/050/406/3803/front_en.12.200.jpg",
      "product_display_name":"Albeni Bar Cake – Ülker – 30g",
      "url":"https://world.openfoodfacts.org/product/8690504063803/albeni-bar-cake-ulker"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.46 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":72,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"21 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":19,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":44,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111242106949",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/210/6949/front_fr.61.200.jpg",
      "product_display_name":"Jben – Jaouda – 160g",
      "url":"https://world.openfoodfacts.org/product/6111242106949/jben-jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111128000071",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/112/800/0071/front_fr.60.200.jpg",
      "product_display_name":"Ain Saïss – Danone – 1.5 l",
      "url":"https://world.openfoodfacts.org/product/6111128000071/ain-saiss-danone"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035502828",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/550/2828/front_fr.3.200.jpg",
      "product_display_name":"Eau minéral naturelle – Ain atlas – 33cl",
      "url":"https://world.openfoodfacts.org/product/6111035502828/eau-mineral-naturelle-ain-atlas"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.0065 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.1333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035000027",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/0027/front_en.59.200.jpg",
      "product_display_name":"Minéral water – Sidi Ali – 50 cl",
      "url":"https://world.openfoodfacts.org/product/6111035000027/mineral-water-sidi-ali"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":15.6818181818182,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"10.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":0,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"0.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":96.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":98.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"en:celery in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-celery.svg",
                  "id":"allergens_no_celery",
                  "match":0,
                  "name":"Celery",
                  "status":"known",
                  "title":"Contains: Celery"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"50184453",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/005/018/4453/front_en.78.200.jpg",
      "product_display_name":"Marmite Yeast Extract – 250 g",
      "url":"https://world.openfoodfacts.org/product/50184453/marmite-yeast-extract"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":82.3571428571429,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"6 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":69.4117647058823,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 5 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":71,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111242100985",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/210/0985/front_en.58.200.jpg",
      "product_display_name":"Jaouda – 80 g",
      "url":"https://world.openfoodfacts.org/product/6111242100985/jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":65.75,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":90,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":86.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111032009665",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/200/9665/front_en.18.200.jpg",
      "product_display_name":"Lait Frais – centrale danone – 470 ml",
      "url":"https://world.openfoodfacts.org/product/6111032009665/lait-frais-centrale-danone"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.5 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":70,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"75 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"34 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (19 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":20,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111099003897",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/109/900/3897/front_en.42.200.jpg",
      "product_display_name":"Margarine de table – lilia – 200",
      "url":"https://world.openfoodfacts.org/product/6111099003897/margarine-de-table-lilia"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":62.1875,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111252421582",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/125/242/1582/front_ar.34.200.jpg",
      "product_display_name":"اكوافينا – pepsi – 1,5l",
      "url":"https://world.openfoodfacts.org/product/6111252421582/%D8%A7%D9%83%D9%88%D8%A7%D9%81%D9%8A%D9%86%D8%A7-pepsi"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.49 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":70.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"17 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":30.5882352941176,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"5.6 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":17.6,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"19 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":31,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210449283",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/044/9283/front_en.605.200.jpg",
      "product_display_name":"Prince Chocolate Cookies – Lu – 100g",
      "url":"https://world.openfoodfacts.org/product/7622210449283/prince-chocolate-cookies-lu"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":19.1363636363636,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.03 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":98,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"55 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"30 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"5 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":29,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3046920029759",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/304/692/002/9759/front_en.396.200.jpg",
      "product_display_name":"Lindt Excellence 90% – 100 g",
      "url":"https://world.openfoodfacts.org/product/3046920029759/lindt-excellence-90"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.0784 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":89.5466666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035003035",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/3035/front_en.61.200.jpg",
      "product_display_name":"Oulmes natural carbonated water – Les eaux minérales d'Oulmès S.A. – 1L",
      "url":"https://world.openfoodfacts.org/product/6111035003035/oulmes-natural-carbonated-water-les-eaux-minerales-d-oulmes-s-a"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":8.77272727272727,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.107 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":92.8666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"30.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":9.1,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"10.6 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":31,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3017620425035",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/301/762/042/5035/front_en.583.200.jpg",
      "product_display_name":"Nutella – Ferrero – 1 kg",
      "url":"https://world.openfoodfacts.org/product/3017620425035/nutella-ferrero"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.7741935483871,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.126 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":83.2,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 14 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":51,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5449000147417",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/544/900/014/7417/front_en.73.200.jpg",
      "product_display_name":"Orange juice – Coca cola – 1L",
      "url":"https://world.openfoodfacts.org/product/5449000147417/orange-juice-coca-cola"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":11.3636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.217 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":85.5333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"22.2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17.8,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"10.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":66,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111031005064",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/100/5064/front_fr.9.200.jpg",
      "product_display_name":"tonik – Bimo – 23",
      "url":"https://world.openfoodfacts.org/product/6111031005064/tonik-bimo"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111180000231",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/118/000/0231/front_fr.117.200.jpg",
      "product_display_name":"levure pâtisserie –  – 80 g",
      "url":"https://world.openfoodfacts.org/product/6111180000231/levure-patisserie"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111128000163",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/112/800/0163/front_fr.32.200.jpg",
      "product_display_name":"Ain Saiss 33cl – Danone – 0.33 L",
      "url":"https://world.openfoodfacts.org/product/6111128000163/ain-saiss-33cl-danone"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":45.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.38 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":76,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":71.4285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":0,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Contains: Sesame seeds"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":57,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175680011480",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/568/001/1480/front_en.221.200.jpg",
      "product_display_name":"Gerblé - Sesame Cookie, 230g (8.2oz) – 230g",
      "url":"https://world.openfoodfacts.org/product/3175680011480/gerble-sesame-cookie-230g-8-2oz"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "description_short":"0.3 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":98,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":73,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111162000839",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/116/200/0839/front_fr.52.200.jpg",
      "product_display_name":"Confiture de fraise – Délicia – 430 g",
      "url":"https://world.openfoodfacts.org/product/6111162000839/confiture-de-fraise-delicia"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 12 ingredients (11 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035001659",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/1659/front_fr.21.200.jpg",
      "product_display_name":"Ain Atlas – Eau minérale naturelle des Montagnes d'Atlas – 5L",
      "url":"https://world.openfoodfacts.org/product/6111035001659/ain-atlas-eau-minerale-naturelle-des-montagnes-d-atlas"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":67.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"3.3 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":78.9411764705882,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"2.4 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":64.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":67,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111242100206",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/210/0206/front_en.38.200.jpg",
      "product_display_name":"Yaourt nature – Jaouda – 110 g",
      "url":"https://world.openfoodfacts.org/product/6111242100206/yaourt-nature-jaouda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.12 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":84,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111035001635",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/103/500/1635/front_en.38.200.jpg",
      "product_display_name":"Ain Atlas – Eau minérale naturelle – 1.5 L",
      "url":"https://world.openfoodfacts.org/product/6111035001635/ain-atlas-eau-minerale-naturelle"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":35.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.75 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"65.2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"9.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0.799999999999997,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"14 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":0,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Contains: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/5-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"5 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.8215,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111184004129",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/118/400/4129/front_en.55.200.jpg",
      "product_display_name":"Mayonnaise  Original recipe – Star – 280ml",
      "url":"https://world.openfoodfacts.org/product/6111184004129/mayonnaise-original-recipe-star"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.905 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":49.75,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"0.8 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":94.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":98.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5025125000006",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/502/512/500/0006/front_en.69.200.jpg",
      "product_display_name":"Sourdough White Ciabattin Bread – Jason’s – 580 g",
      "url":"https://world.openfoodfacts.org/product/5025125000006/sourdough-white-ciabattin-bread-jason-s"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.03 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":98,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"46.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"28.2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"7 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":43,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Helps producers in developing countries.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":100,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"20995553",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/099/5553/front_en.305.200.jpg",
      "product_display_name":"Шоколад 85% какаова маса – J.D. Gross – 100",
      "url":"https://world.openfoodfacts.org/product/20995553/%D1%88%D0%BE%D0%BA%D0%BE%D0%BB%D0%B0%D0%B4-85-%D0%BA%D0%B0%D0%BA%D0%B0%D0%BE%D0%B2%D0%B0-%D0%BC%D0%B0%D1%81%D0%B0-j-d-gross"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.00476 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.3653333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3268840001008",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/326/884/000/1008/front_fr.422.200.jpg",
      "product_display_name":"CRISTALINE Eau De Source 0.5L – 500 ml",
      "url":"https://world.openfoodfacts.org/product/3268840001008/cristaline-eau-de-source-0-5l"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.002 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.7333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111128000460",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/112/800/0460/front_fr.32.200.jpg",
      "product_display_name":"aïn Saiss – 5 L",
      "url":"https://world.openfoodfacts.org/product/6111128000460/ain-saiss"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3017620422003",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.633.200.jpg",
      "product_display_name":"Nutella – Ferrero – 400 g",
      "url":"https://world.openfoodfacts.org/product/3017620422003/nutella-ferrero"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":67.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.787 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":55.65,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"0.698 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":95.3466666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":98.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5025125000112",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/502/512/500/0112/front_en.46.200.jpg",
      "product_display_name":"White Sourdough Bread – Jason’s – 450 g",
      "url":"https://world.openfoodfacts.org/product/5025125000112/white-sourdough-bread-jason-s"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.825 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":53.75,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"2.7 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":82,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.3 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":96,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"15 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":79,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5025125000037",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/502/512/500/0037/front_en.45.200.jpg",
      "product_display_name":"Sourdough Grains & Seeds – Jason's – 580 g",
      "url":"https://world.openfoodfacts.org/product/5025125000037/sourdough-grains-seeds-jason-s"
   }
]
;
var product_type = "food";
</script>
<script src="https://static.openfoodfacts.org/js/product-preferences.js"></script>
<script src="https://static.openfoodfacts.org/js/product-search.js"></script>

<script>
$(document).foundation({
	equalizer : {
		equalize_on_stack: true
	},
	accordion: {
		callback : function (accordion) {
			$(document).foundation('equalizer', 'reflow');
		}
	}
});

</script>
<script type="application/ld+json">
{
	"@context" : "https://schema.org",
	"@type" : "WebSite",
	"name" : "Open Food Facts",
	"url" : "https://world.openfoodfacts.org",
	"potentialAction": {
		"@type": "SearchAction",
		"target": "https://world.openfoodfacts.org/cgi/search.pl?search_terms=?{search_term_string}",
		"query-input": "required name=search_term_string"
	}
}
</script>
<script type="application/ld+json">
{
	"@context": "https://schema.org/",
	"@type": "Organization",
	"url": "https://world.openfoodfacts.org",
	"logo": "https://static.openfoodfacts.org/images/logos/off-logo-vertical-light.svg",
	"name": "Open Food Facts",
	"sameAs" : ["https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web", "https://x.com/OpenFoodFacts"]
}
</script>





</body>
</html>

<!-- data_debug: data_debug start
platform: public
can_use_cache: 1
cache_hit
-->

<!-- end templates/web/common/site_layout.tt.html -->

  recorded_at: Sun, 15 Jun 2025 21:04:04 GMT
recorded_with: VCR 6.3.1
