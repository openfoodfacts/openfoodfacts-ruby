---
http_interactions:
- request:
    method: get
    uri: https://world.openfoodfacts.org/facets/brands/bel/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.18.0
      Date:
      - Sun, 15 Jun 2025 21:21:20 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Sat, 14 Jun 2025 21:21:19 GMT
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Xss-Protection:
      - 1; mode=block
      X-Request-Id:
      - wTOBXzR8DuQy7BJ9
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!-- start templates/web/common/site_layout.tt.html -->

<!doctype html>
<html class="no-js" lang="en" data-serverdomain="openfoodfacts.org" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>bel</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta property="fb:app_id" content="219331381518041">
    <meta property="og:type" content="food">
    <meta property="og:title" content="bel">
    <meta property="og:url" content="https://world.openfoodfacts.org/facets/brands/en:bel/1">
    
    <meta property="og:image" content="https://static.openfoodfacts.org/images/logos/off-logo-vertical-white-social-media-preview.png">
    <meta property="og:description" content="A collaborative, free and open database of ingredients, nutrition facts and information on food products from around the world">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/off/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/off/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/off/favicon-16x16.png">
<link rel="manifest" href="/images/favicon/off/site.webmanifest">
<link rel="mask-icon" href="/images/favicon/off/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/images/favicon/off/favicon.ico">
<meta name="msapplication-TileColor" content="#00aba9">
<meta name="msapplication-config" content="/images/favicon/off/browserconfig.xml">
<meta name="theme-color" content="#ffffff">

	<meta name="apple-itunes-app" content="app-id=588797948">
    <link rel="canonical" href="https://world.openfoodfacts.org/facets/brands/en:bel/1">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/app-ltr.css?v=1749629930" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/jqueryui/themes/base/jquery-ui.css" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/select2.min.css">
    <link rel="search" href="https://world.openfoodfacts.org/cgi/opensearch.pl" type="application/opensearchdescription+xml" title="Open Food Facts">
    <script type="module" src="https://static.openfoodfacts.org/js/dist/off-webcomponents.bundled.js"></script>
	
    <style media="all">
        .show-when-no-access-to-producers-platform {display:none}
.show-when-logged-in {display:none}

		
		.badge-container{
			margin: 0 auto;
		}

		.badge-container img{
			margin: 5px;
		}
		@media only screen and (max-width: 537px ) and (min-width: 280px) {
			.badge-container{
				width: 280px;
			}
		}
		@media only screen and (max-width: 279px ){
			.badge-container{
				width: 130px;
			}
		}
    </style>
</head>
<body class="products_page">

	<!-- Matomo -->
<script>
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.openfoodfacts.org"]);
  _paq.push(["setDomains", ["*.openfoodfacts.org"]]);
  _paq.push(["setDoNotTrack", true]);
  _paq.push(["disableCookies"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//analytics.openfoodfacts.org/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '5']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//analytics.openfoodfacts.org/matomo.php?idsite=5&amp;rec=1" style="border:0;" alt="" /></p></noscript>
<!-- End Matomo Code -->



	
	<div class="skip"><a href="#content" tabindex="0">Skip to Content</a></div>
	

	<div id="barcode-scanner-modal" class="modal is_hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <span><h2>Scan a product<h2></span>
      <button class="modal-close-button">&times;</button>
    </div>
    <div>
      <barcode-scanner id="barcode-scanner"></barcode-scanner>
    </div>
    <div>
    </div>
    <div >
      <label for="barcode-modal-input">Or enter barcode manually</label>
      <div class="barcode-modal-group">
        <input type="text" id="barcode-modal-input" class="barcode-modal-input" inputmode="numeric" pattern="\d*" />
        <button class="barcode-modal-button button" id="barcode-modal-button" disabled>Scan</button>
      </div>
    </div>
  </div>
</div>

<script src="https://static.openfoodfacts.org/js/dist/barcode-scanner.js"></script>


	<div id="page">
		
		<div class="upper-nav contain-to-grid"  id="upNav">
			<nav class="top-bar " data-topbar role="navigation">
				
				<section class="top-bar-section">
					
					<!-- Left Nav Section -->
					<ul class="left">

						<li class="has-dropdown">
							<a id="menu_link">
								<span class="material-icons">
									menu
								</span>
							</a>
							<ul class="dropdown">				
								
									<li><a href="/discover">Discover</a></li>
									<li><a href="/contribute">Contribute</a></li>
									<li class="divider"></li>
									<li><label>Add products</label></li>
                <!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
									<li><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=pro_platform_install_the_app_to_add_products_en">Install the app to add products</a></li>
									<li><a href="/cgi/product.pl?type=search_or_add&action=display">Add a product</a></li>
								

								<li class="divider"></li>
								<li><label>Search and analyze products</label></li>

								<li>
									<a href="/cgi/search.pl">Advanced search</a>
								</li>
								<li>
									<a href="/cgi/search.pl?graph=1">Graphs and maps</a>
								</li>
								
							</ul>
						</li>
						
						<li>
							<ul class="country_language_selection">
								<li class="has-form has-dropdown" id="select_country_li">
									<select id="select_country" style="width:100%" data-placeholder="Country">
										<option></option>
									</select>
								</li>
								<li class="has-dropdown">
									<a href="https://world.openfoodfacts.org/">English</a>

									<ul class="dropdown">
										
									</ul>
								</li>
							</ul>
						</li>
					</ul>


					<!-- Right Nav Section -->
					
					<ul class="right">
						
							<li class="h-space-tiny has-form">
								<a href="/cgi/session.pl" class="round button secondary">
									<span class="material-icons material-symbols-button">account_circle</span>
									Sign in
								</a>
							</li>
						
					</ul>
				</section>
			</nav>
		</div>
		

		<div id="main_container" style="position:relative" class="block_latte">
		
		
		<div class="topbarsticky">
			<div class="contain-to-grid " id="offNav" >
				<nav class="top-bar" data-topbar role="navigation" >

					<ul class="title-area">
						<li class="name">
							<div style="position:relative;max-width:292px;">
								<a href="/">
								<img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;">
								
							</a>
							</div>
						</li>
					</ul>

					
					
					<section class="top-bar-section">
					
						<ul class="left small-4">
							<li class="search-li">
							
								<form action="/cgi/search.pl">
								<div class="row"><div class="small-12">
								<div class="row collapse postfix-round">
									<div class="columns">
									<input type="text" placeholder="Search for a product" name="search_terms" value="" style="background-color:white">
									<input name="search_simple" value="1" type="hidden">
									<input name="action" value="process" type="hidden">
									</div>
									<div class="columns postfix-button-wrapper">
									<button type="submit" title="Search" class="button postfix" style="line-height:normal"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
									</div>
									<div class="columns postfix-button-wrapper is_hidden">
  <button
    type="button"
    title="Scan a product"
    class="button barcode-scanner-button"
    id="barcode-scanner-button"
  >
    <svg style="width:24px;height:24px" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M2,6H4V18H2V6M5,6H6V18H5V6M7,6H10V18H7V6M11,6H12V18H11V6M14,6H16V18H14V6M17,6H20V18H17V6M21,6H22V18H21V6Z"/></svg>
  </button>

  <script src="https://static.openfoodfacts.org/js/dist/barcode-scanner-button.js"></script>
</div>

								</div>
								</div></div>
								</form>
							</li>
						</ul>
					<ul class="search_and_links">
						<li><a href="/discover" class="top-bar-links">Discover</a></li>
						<li><a href="/contribute" class="top-bar-links">Contribute</a></li>
						<li class="show-for-xlarge-up"><a href="https://world.pro.openfoodfacts.org/" class="top-bar-links">Producers</a></li>
						<li class="flex-grid getapp"><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=search_and_links_promo_en" class="buttonbar button" style="top:0;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <span class="bt-text">Get the app</span></a></li>
				<!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
          </ul>
					</section>
					
				</nav>
			</div>
		</div>

	
	
		<nav class="tab-bar hide">
			<div class="left-small">
				<a href="#idOfLeftMenu" role="button" aria-controls="idOfLeftMenu" aria-expanded="false" class="left-off-canvas-toggle button postfix anonymous">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
				</a>
			</div>
			<div class="middle tab-bar-section">
				<form action="/cgi/search.pl">
					<div class="row collapse">
						<div class="small-8 columns">
							<input type="text" placeholder="Search for a product" name="search_terms">
							<input name="search_simple" value="1" type="hidden">
							<input name="action" value="process" type="hidden">
						</div>
						<div class="small-2 columns">
							<button type="submit" class="button postfix"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
						</div>
						<div class="small-2 columns">
							<a href="/cgi/search.pl" title="Advanced search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg></a>
						</div>
					</div>
				</form>
			</div>
		</nav>
		

		<div id="content" class="off-canvas-wrap block_latte" data-offcanvas>
			<div class="inner-wrap">
			
				<a class="exit-off-canvas"></a>

				
				
				<!-- full width banner on mobile -->
				
				

				

				<div class="main block_light">
					<div id="main_column">

						
						
							
							
								<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

								

<section id="donation-banner-top" class="donation-banner row">
  <div class="donation-banner__left-aside">
    <div class="donation-banner__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div class="donation-banner__aside">
      <div class="donation-banner__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <div style="padding:1rem;">
        <p>Your donations fund the day-to-day operations of our non-profit association:</p>
        <ul>
          <li>
            keeping our database open & available to all,
            <ul>
              <li>technical infrastructure (website/mobile app) & a small permanent team</li>
            </ul>
          </li>
          <li>
            <p>remain independent of the food industry,</p>
          </li>
          <li>
            <p>engage a community of committed citizens,</p>
          </li>
          <li>
            <p>support the advancement of public health research.</p>
          </li>
        </ul>
      </div>
    </div>
    <div class="donation-banner__actions-section">
      <div class="donation-banner__actions-section__financial">
        <p>
          
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
          
        </p>
      </div>
      <div class="donation-banner__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
  <div class="donation-banner__close">
    <button id="hide-donate-banner" class="material-icons modest" onclick="DonationButton();" onkeypress="DonationButton();">close</button>
  </div>
</section>

<script>
  let d = new Date();
  let bannerID = document.getElementById('donation-banner-top');
  let getDomain = window.location.origin.split('.');

  function setBannerCookie(bcname, bcval, bcexdays) {
    d.setTime(d.getTime() + (bcexdays*60*60*24*1000));
    let expires = 'expires=' + d.toUTCString();
    // Apply cookie for every domain contains open...facts
    let domain = 'domain=.' + getDomain.slice(1).join('.');
    document.cookie = bcname + '=' + bcval + ';' + expires + ';' + domain + ';SameSite=None;Secure;path=/';
  }

  function getBannerCookie(bcname) {
    const name = bcname + '=';
    const decodedCookies = decodeURIComponent(document.cookie);
    const cookies = decodedCookies.split(';');
    for (const cookie of cookies) {
      let c = cookie;
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
    }

    return '';
  }

  function DonationButton() {
    setBannerCookie('off_donation_banner_2024_a', 1, 180);
    bannerID.style.display = 'none';
  }

  if (getBannerCookie('off_donation_banner_2024_a') !== '') {
    bannerID.style.display = 'none';
  } else {
    bannerID.style.display = 'flex';
  }
</script>


							
						
						
            			
						
							
								<!-- some lists of products for facets (e.g. brands) have microformats data -->
								<div itemscope itemtype="https://schema.org/Brand">
									<div class="row">
										<div class="small-12 column v-space-short">
											<h1 itemprop="name">bel</h1>
										</div>
									</div>
								  <!-- start templates/web/pages/tag/tag.tt.html -->
<div class="tag">
    <div class="row">
        <div class="large-6 column">

            <div class="tag_navigation">
                
                    <a href="/facets/brands">Brand</a>:
                    <a href="/facets/brands/bel">Bel</a>
                    
                
            </div>

            

                

                

                

                

                

                

            

            

            
        </div>

        
            

            <div class="large-6 column">                
            <!-- injecting facet-knowledge-panel -->
            <div id="facet-knowledge-panel" style="margin-left: 70px; z-index: 1;">
                <h2 id="facet_panels_title"></h2>
                <div id="facet_panels_content"></div>
            </div>
            <!-- Fetching facet knowledge panel -->                
            <script>
                    let facet_kp = "https://facets-kp.openfoodfacts.org/render-to-html";
                    let params = "?facet_tag=brands&value_tag=xx:bel";
                    if ("") {
                        params += "&sec_facet_tag=&sec_value_tag="
                    }

                    // Adding language code to get translated data
                    params += "&lang_code=en&country=world";

                    fetch(facet_kp + params)
                        .then((response) => {
                            if (response.ok) {
                                return response.text();
                            }
                            else {
                                throw new Error("Network Response Error while fetching facet kp");

                            }
                        })
                        .then(data => {
                            let title = document.getElementById("facet_panels_title");
                            title.innerHTML = "Facet knowledge panel";
                            let knowledgepanel = document.getElementById("facet_panels_content");
                            knowledgepanel.innerHTML = data;
                            // Keeping Hungergames and Lastedits panel open by default
                            jQuery("#HungerGames").attr("open", true);
                            jQuery("#LastEdits").attr("open", true);

                        })
                </script>
            </div>
            
        
    </div>
</div>

<!-- end templates/web/pages/tag/tag.tt.html -->
<!-- start templates/web/common/includes/list_of_products.tt.html --> 

<div class="row">
  <div class="small-12 columns"> 
    
    
      
      
      
      <!-- display a permalink if the url is for a script that may have POST parameters -->
      
    
    
  </div>
</div>

 

<div class="block short block_ristreto">
  <div class="row">
    <div class="small-12 columns filterProducts">
      <div>
        <span class="filterProducts__results">
          <span class="material-icons" aria-hidden="true">search</span>
          245 products
        </span>
      </div>
      <div class="filterProducts__buttons">
        <div>
          <button href="#" data-dropdown="drop_sort" aria-controls="drop_sort" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">swap_vert</span>
            
          </button>
          <ul id="drop_sort" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/brands/bel?sort_by=popularity" onclick="$.cookie('last_sort_by', 'popularity', { expires: 180, path: '/' });">Most scanned products</a>
            </li>
        
            <li>
              <a href="/facets/brands/bel?sort_by=nutriscore_score" onclick="$.cookie('last_sort_by', 'nutriscore_score', { expires: 180, path: '/' });">Products with the best Nutri-Score</a>
            </li>
        
            <li>
              <a href="/facets/brands/bel?sort_by=environmental_score_score" onclick="$.cookie('last_sort_by', 'environmental_score_score', { expires: 180, path: '/' });">Products with the best Green-Score</a>
            </li>
        
            <li>
              <a href="/facets/brands/bel?sort_by=created_t" onclick="$.cookie('last_sort_by', 'created_t', { expires: 180, path: '/' });">Recently added products</a>
            </li>
        
            <li>
              <a href="/facets/brands/bel?sort_by=last_modified_t" onclick="$.cookie('last_sort_by', 'last_modified_t', { expires: 180, path: '/' });">Recently modified products</a>
            </li>
        
          </ul>
        </div>
        
        
        <div>
          <button href="#" data-dropdown="drop1" aria-controls="drop1" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">sort</span>
            Explore products by...
          </button>
          <ul id="drop1" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/brands/bel/countries" rel="nofollow">Countries</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/nutrition-grades" rel="nofollow">Nutrition grades</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/nova-groups" rel="nofollow">NOVA groups</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/environmental-score" rel="nofollow">Green-Score</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/brands" rel="nofollow">Brands</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/categories" rel="nofollow">Categories</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/labels" rel="nofollow">Labels</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/packaging" rel="nofollow">Packaging</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/origins" rel="nofollow">Origins of ingredients</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/manufacturing-places" rel="nofollow">Manufacturing or processing places</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/packager-codes" rel="nofollow">Traceability codes</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/ingredients" rel="nofollow">Ingredients</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/additives" rel="nofollow">Additives</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/vitamins" rel="nofollow">Added vitamins</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/minerals" rel="nofollow">Added minerals</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/amino-acids" rel="nofollow">Added amino acids</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/nucleotides" rel="nofollow">Added nucleotides</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/other-nutritional-substances" rel="nofollow">Other nutritional substances added</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/allergens" rel="nofollow">Allergens</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/traces" rel="nofollow">Traces</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/misc" rel="nofollow">Miscellaneous</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/languages" rel="nofollow">Languages</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/contributors" rel="nofollow">Contributors</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/states" rel="nofollow">States</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/data-sources" rel="nofollow">Data sources</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/entry-dates" rel="nofollow">Entry dates</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/last-edit-dates" rel="nofollow">Last edit dates</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/last-check-dates" rel="nofollow">Last check dates</a>
            </li>
          
            <li>
              <a href="/facets/brands/bel/teams" rel="nofollow">Teams</a>
            </li>
          
          </ul>
        </div>
        
        
      </div>
    </div>
  </div>
</div>


<div class="row">
	<div class="small-12 columns">
    <div id="preferences_selected" class="small-12 flex-grid v-space-short v-align-center direction-row full-width v-align-between"></div>
    <div id="preferences_selection_form" style="display:none"></div>
  </div>
</div>

	 
<div class="row">
<div class="large-12 columns">
    
    <div id="search_results" style="clear:left;">
        <ul class="products">
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
		</ul>
  </div>
      
    
	<ul id="pages" class="pagination"><li class="unavailable">Pages:</li><li class="current"><a href="">1</a></li><li><a href="/facets/brands/bel/2">2</a></li><li><a href="/facets/brands/bel/3">3</a></li><li><a href="/facets/brands/bel/4">4</a></li><li><a href="/facets/brands/bel/5">5</a></li><li><a href="/facets/brands/bel/2" rel="next$nofollow">Next</a></li><li class="unavailable">(50 products per page)</li></ul>

  </div>
</div>


<!-- end templates/web/common/includes/list_of_products.tt.html -->

								</div>
							
						
					</div>
				</div>
			</div>
		</div>
		</div>

		
		<footer>
			<div class="block_light bg-white" id="install_the_app_block">
				<div class="row">
					<div class="small-12 flex-grid v-space-short v-align-center direction-row h-space-tiny">
						<div class="cell small-100 medium-100 large-50 flex-grid v-align-center direction-row">
							<img class="cell small-50 v-align-center" src="/images/illustrations/app-icon-in-the-clouds.svg" alt="The Open Food Facts logo in the cloud" style="height:120px">
							<div class="cell small-50 v-align-center" id="footer_scan" style="display:block">
								<div id="footer_install_the_app">
									Install the app!
								</div>
								Scan your <span id="everyday">everyday</span> <span id="foods">foods</span>
							</div>
						</div>
						<div class="row">
							<div class="small-12 medium-12 large-12 v-space-normal column badge-container">
								<!-- android_app_link - https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner&hl=en -->
								<a  href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner&utm_source=off&utf_medium=web&utm_campaign=install_the_app_android_footer_en"><img src="/images/misc/playstore/img/latest/GetItOnGooglePlay_Badge_Web_color_English.svg" alt="Get It On Google Play" loading="lazy" height="40" width="120"></a>
								
								<a href="https://f-droid.org/packages/openfoodfacts.github.scrachx.openfood"><img src="/images/misc/f-droid/svg/get-it-on-en.svg" alt="Available on F-Droid" loading="lazy" height="40" width="120"></a>

								<!-- android_apk_app_link - https://world.openfoodfacts.org/images/apps/off.apk -->
								<a href="https://github.com/openfoodfacts/smooth-app/releases/latest?utm_source=off&utf_medium=web&utm_campaign=install_the_app_apk_footer_en"><img src="/images/misc/app-landing-page/download-apk/download-apk_en.svg" alt="Android APK" loading="lazy" height="40" width="120"></a>
								
								<!-- msgid "https://apps.apple.com/app/open-beauty-facts/id1122926380" -->
								<a href="https://apps.apple.com/app/open-food-facts/id588797948?utm_source=off&utf_medium=web&utm_campaign=install_the_app_ios_footer_en"><img src="/images/misc/appstore/black/appstore_US.svg" alt="Download on the App Store"  loading="lazy" height="40" width="120"></a>
							</div>
						</div>
					</div>
				</div>
			</div>

			
      			<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

				

<section class="donation-banner-footer row">
  <div class="donation-banner-footer__left-aside">
    <div class="donation-banner-footer__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div>
      <div class="donation-banner-footer__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner-footer__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <p>Your donations fund the day-to-day operations of our non-profit association:</p>
      <ul>
        <li>
          keeping our database open & available to all,
          <ul>
            <li>technical infrastructure (website/mobile app) & a small permanent team</li>
          </ul>
        </li>
        <li>
          <p>remain independent of the food industry,</p>
        </li>
        <li>
          <p>engage a community of committed citizens,</p>
        </li>
        <li>
          <p>support the advancement of public health research.</p>
        </li>
      </ul>
    </div>
    <div class="donation-banner-footer__actions-section">
      <div class="donation-banner-footer__actions-section__financial">
        <p>
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
        </p>
      </div>
      <div class="donation-banner-footer__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
</section>


			
      		
			<div class="block_light block_cappucino" id="contribute_and_discover_links_block">
				<div class="row">
					<div class="small-12 large-6 columns v-space-normal block_off">
						<h3 class="title-5 text-medium">Join the community</h3>
						<p>Discover our <a href="/code-of-conduct">Code of conduct</a></p>
						<p>Join us on <a href="https://slack.openfoodfacts.org">Slack</a></p>
						<p><a href="https://forum.openfoodfacts.org/">Forum</a></p>
						<p id="footer_social_icons">Follow us: 
							<a href="https://x.com/OpenFoodFacts"><img src="/images/icons/dist/x.svg" class="footer_social_icon" alt="x"></a>
							<a href="https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web"><img src="/images/icons/dist/facebook.svg" class="footer_social_icon" alt="Facebook"></a>
							<a href="https://www.instagram.com/open.food.facts/"><img src="/images/icons/dist/instagram.svg" class="footer_social_icon" alt="Instagram"></a>
							
						</p>
						<p><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></p>
					</div>
					<div class="small-12 large-6 columns project v-space-normal">
						<h3 class="title-5 text-medium">Discover the project</h3>
						<ul class="inline-list tags_links v-space-tiny h-space-tiny" >
							<li><a class="button small white-button radius" href="/who-we-are">Who we are</a></li>
							<li><a class="button small white-button radius" href="https://world.openfoodfacts.org/open-food-facts-vision-mission-values-and-programs">Vision, Mission, Values and Programs</a></li>
							<li><a class="button small white-button radius" href="https://support.openfoodfacts.org/help/en-gb">Frequently asked questions</a></li>
							<li><a class="button small white-button radius" href="https://blog.openfoodfacts.org/en/">Open Food Facts blog</a></li>
							<li><a class="button small white-button radius" href="/press">Press</a></li>
							<li><a class="button small white-button radius" href="https://wiki.openfoodfacts.org">Open Food Facts wiki (en)</a></li>
							<li><a class="button small white-button radius" href="/cgi/top_translators.pl">Translators</a></li>
							<li><a class="button small white-button radius" href="/partners">Partners</a></li>
							<li><a class="button small white-button radius" href="https://world.openbeautyfacts.org">Open Beauty Facts - Cosmetics</a></li>
							<li><a class="button small white-button radius" href="https://world.pro.openfoodfacts.org/">Open Food Facts for Producers</a></li>
						</ul>
					</div>
				</div>
			</div>

			<div class="block_off block_dark block_ristreto" id="footer_block">

				<div id="footer_block_image_banner_outside">
					<div id="footer_block_image_banner_outside2">

						<div class="row">

							<div class="small-12 text-center v-space-short h-space-large">
								<a href="/" style="font-size:1rem;"><img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-mono-white.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;"></a>

								<p>A collaborative, free and open database of food products from around the world.</p>
								
								<ul class="inline-list text-center text-small">
									<li><a href="/legal">Legal</a></li>
									<li><a href="/privacy">Privacy</a></li>
									<li><a href="/terms-of-use">Terms of use</a></li>
									<li><a href="/data">Data, API and SDKs</a></li>
									<li><a href="https://world.openfoodfacts.org/donate-to-open-food-facts">Donate to Open Food Facts</a></li>
									<li><a href="https://world.pro.openfoodfacts.org/">Producers</a></li>
									<li><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></li>
								</ul>
							</div>

						</div>

					</div>
				</div>
			</div>
		</footer>
		

	</div>

<script src="https://static.openfoodfacts.org/js/dist/modernizr.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery-ui.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/hc-sticky.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/display.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/stikelem.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/scrollNav.js"></script>
  

<script>
$(function() {
display_user_product_preferences("#preferences_selected", "#preferences_selection_form", function () {
	rank_and_display_products("#search_results", products, contributor_prefs);
});
rank_and_display_products("#search_results", products, contributor_prefs);


});
</script>



<script src="https://static.openfoodfacts.org/js/dist/foundation.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.cookie.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/select2.min.js"></script>
<script type="text/javascript">
var page_type = "products";
var default_preferences = {"ecoscore":"important","nova":"important","nutriscore":"very_important"};
var preferences_text = "Classify the 50 products below according to your preferences";
var contributor_prefs = {"display_barcode":null,"edit_link":null};
var products = [
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":17.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780828628",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/082/8628/front_en.12.200.jpg",
      "product_display_name":"Mini Babybel Original – Bel – 120 g",
      "url":"https://world.openfoodfacts.org/product/3073780828628/mini-babybel-original-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":30,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"37 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":3,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"25 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":50,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781099621",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/109/9621/front_fr.97.200.jpg",
      "product_display_name":"Boursin Ail & Fines Herbes – Bel – 160 g",
      "url":"https://world.openfoodfacts.org/product/3073781099621/boursin-ail-fines-herbes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"27.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":12.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":40,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8721800082318",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/872/180/008/2318/front_fr.74.200.jpg",
      "product_display_name":"Leerdammer maxi portion – Bel – 500 g",
      "url":"https://world.openfoodfacts.org/product/8721800082318/leerdammer-maxi-portion-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":49.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"7 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":65.8823529411765,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"4.7 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":25.1428571428571,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":42,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781175011",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/117/5011/front_fr.24.200.jpg",
      "product_display_name":"La Vache qui rit légère 16 portions – 267 g",
      "url":"https://world.openfoodfacts.org/product/3073781175011/la-vache-qui-rit-legere-16-portions"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":34.1176470588235,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"10.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":36,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8721800021706",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/872/180/002/1706/front_fr.131.200.jpg",
      "product_display_name":"Leerdammer léger – Bel – 8 tranches 200 g",
      "url":"https://world.openfoodfacts.org/product/8721800021706/leerdammer-leger-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":30,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"37 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":3,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"25 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":49,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781069259",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/106/9259/front_fr.97.200.jpg",
      "product_display_name":"Boursin Ail & Fines Herbes – Bel – 250 g",
      "url":"https://world.openfoodfacts.org/product/3073781069259/boursin-ail-fines-herbes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"11 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":42,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780969000",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/096/9000/front_fr.196.200.jpg",
      "product_display_name":"To taste – Bel – 280 g",
      "url":"https://world.openfoodfacts.org/product/3073780969000/to-taste-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"11 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780968997",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/096/8997/front_fr.142.200.jpg",
      "product_display_name":"Kiri® Goûter 5 barquettes – Bel – 175 g",
      "url":"https://world.openfoodfacts.org/product/3073780968997/kiri-gouter-5-barquettes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.23 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":33.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"39 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":1,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":46,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175460001625",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/546/000/1625/front_en.53.200.jpg",
      "product_display_name":"Boursin portions garlic & herbs – Bel – 96 g",
      "url":"https://world.openfoodfacts.org/product/3175460001625/boursin-portions-garlic-herbs-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":17.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":48,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780902366",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/090/2366/front_es.69.200.jpg",
      "product_display_name":"Original Mini – Babybel – 120 g (6 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073780902366/original-mini-babybel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"26 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":14,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":58,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780865661",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/086/5661/front_en.25.200.jpg",
      "product_display_name":"port salut – Bel – 185 g",
      "url":"https://world.openfoodfacts.org/product/3073780865661/port-salut-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.4 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":25,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"39.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":44,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781034769",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/103/4769/front_fr.130.200.jpg",
      "product_display_name":"Boursin® Salade Ail & Fines Herbes – Bel – 120 g",
      "url":"https://world.openfoodfacts.org/product/3073781034769/boursin-salade-ail-fines-herbes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"27.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":12.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":44,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781069716",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/106/9716/front_fr.68.200.jpg",
      "product_display_name":"Babybel – 200 g",
      "url":"https://world.openfoodfacts.org/product/3073781069716/babybel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"27.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":12.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":39,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8721800082110",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/872/180/008/2110/front_fr.63.200.jpg",
      "product_display_name":"Leerdam portion – Bel – 250 g",
      "url":"https://world.openfoodfacts.org/product/8721800082110/leerdam-portion-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":13.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":21.7647058823529,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":46,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781110890",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/111/0890/front_fr.99.200.jpg",
      "product_display_name":"Apéricube Cocktail 48C – 250 g",
      "url":"https://world.openfoodfacts.org/product/3073781110890/apericube-cocktail-48c"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"40 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":59,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175460000062",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/546/000/0062/front_fr.115.200.jpg",
      "product_display_name":"Black pepper – Bel – 150 g",
      "url":"https://world.openfoodfacts.org/product/3175460000062/black-pepper-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"19 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":23.5294117647059,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"12.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"13 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":45,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781056150",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/105/6150/front_fr.84.200.jpg",
      "product_display_name":"Boursin® Cuisine Ail & Fines Herbes – Bel – 240 g",
      "url":"https://world.openfoodfacts.org/product/3073781056150/boursin-cuisine-ail-fines-herbes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":13.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":21.7647058823529,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":50,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780960410",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/096/0410/front_fr.153.200.jpg",
      "product_display_name":"Apéricube – 250 g",
      "url":"https://world.openfoodfacts.org/product/3073780960410/apericube"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.33 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":28.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"13.1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":44.3529411764706,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"7.43 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":10.28,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780810661",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/081/0661/front_en.101.200.jpg",
      "product_display_name":"Palitosu – Bel – 140 g",
      "url":"https://world.openfoodfacts.org/product/3073780810661/palitosu-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"33 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":7,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"22 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":50,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781035438",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/103/5438/front_fr.50.200.jpg",
      "product_display_name":"Kiri chevre doux - 8b – Bel – 144 g",
      "url":"https://world.openfoodfacts.org/product/3073781035438/kiri-chevre-doux-8b-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781106435",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/110/6435/front_de.42.200.jpg",
      "product_display_name":"Mini-Babybel Original – 120 g (6 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073781106435/mini-babybel-original"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":12,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":21.7647058823529,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 31 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":43,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781108422",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/110/8422/front_fr.95.200.jpg",
      "product_display_name":"Apéricube Long Drink 48C – 250 g",
      "url":"https://world.openfoodfacts.org/product/3073781108422/apericube-long-drink-48c"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 16 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781094930",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/109/4930/front_pt.35.200.jpg",
      "product_display_name":"Palitos Light – A Vaca que ri – 140 g (4 x 35 g)",
      "url":"https://world.openfoodfacts.org/product/3073781094930/palitos-light-a-vaca-que-ri"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":12,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"33 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":7,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"20.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":38,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780982818",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/098/2818/front_fr.75.200.jpg",
      "product_display_name":"Boursein Appetizer Rolled Ham Smoked Garlic & Herbs – Bel – 100 g",
      "url":"https://world.openfoodfacts.org/product/3073780982818/boursein-appetizer-rolled-ham-smoked-garlic-herbs-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":17.4090909090909,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":25.2941176470588,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"17 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":45,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781155037",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/115/5037/front_fr.55.200.jpg",
      "product_display_name":"Tranches Végétales Classiques – Bel – 200 g",
      "url":"https://world.openfoodfacts.org/product/3073781155037/tranches-vegetales-classiques-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"24 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":16,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781014129",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/101/4129/front_es.4.200.jpg",
      "product_display_name":"Babybel – bel",
      "url":"https://world.openfoodfacts.org/product/3073781014129/babybel-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":49,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781106350",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/110/6350/front_de.38.200.jpg",
      "product_display_name":"Käse Mini Babybel – Bel – 180g",
      "url":"https://world.openfoodfacts.org/product/3073781106350/kase-mini-babybel-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":17.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":58,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781095029",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/109/5029/front_fr.58.200.jpg",
      "product_display_name":"Babybel Bio – Bel – 100 g (5 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073781095029/babybel-bio-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":12,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":21.7647058823529,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 18 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":36,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780515931",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/051/5931/front_fr.104.200.jpg",
      "product_display_name":"Apéricube: Flavors Tomato, Blue, Ham – 125 g",
      "url":"https://world.openfoodfacts.org/product/3073780515931/apericube-flavors-tomato-blue-ham"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"40 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"27 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":55,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781036749",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/103/6749/front_fr.46.200.jpg",
      "product_display_name":"Boursin® Echalote & Ciboulette Portion x10 – Bel – 160 g",
      "url":"https://world.openfoodfacts.org/product/3073781036749/boursin-echalote-ciboulette-portion-x10-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":30,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"29 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":11,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":45,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781109375",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/110/9375/front_de.11.200.jpg",
      "product_display_name":"Kiri – Bel – 108g",
      "url":"https://world.openfoodfacts.org/product/3073781109375/kiri-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.4 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":25,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"10.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":42,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781056358",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/105/6358/front_de.48.200.jpg",
      "product_display_name":"Kiri Dippi – 3pcs",
      "url":"https://world.openfoodfacts.org/product/3073781056358/kiri-dippi"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":12,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"32 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":8,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"20.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 21 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":38,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781057027",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/105/7027/front_fr.31.200.jpg",
      "product_display_name":"Boursin Apéritif Les roulés Jambon fumé Echalote Ciboulette – Bel – 100 g",
      "url":"https://world.openfoodfacts.org/product/3073781057027/boursin-aperitif-les-roules-jambon-fume-echalote-ciboulette-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":17.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"15.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781093438",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/109/3438/front_en.3.200.jpg",
      "product_display_name":"Mini-Babybel Original – 300 g (15 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073781093438/mini-babybel-original"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":17.4090909090909,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"16.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":32.3529411764706,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"9.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":2,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 28 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6134261001354",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/613/426/100/1354/front_fr.18.200.jpg",
      "product_display_name":"la vache qui rit l'original – bel – 330 g",
      "url":"https://world.openfoodfacts.org/product/6134261001354/la-vache-qui-rit-l-original-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":43.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.77 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16.4,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":8,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":40,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781150834",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/115/0834/front_de.16.200.jpg",
      "product_display_name":"Mini-Babybel Protein – 180 g (9 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073781150834/mini-babybel-protein"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":16.5454545454545,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"20 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":20,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"17 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781155525",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/115/5525/front_en.11.200.jpg",
      "product_display_name":"Nurishh - Râpé végétal Classique – Bel – 200 g",
      "url":"https://world.openfoodfacts.org/product/3073781155525/nurishh-rape-vegetal-classique-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"27 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":13,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (7 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":42,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781065923",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/106/5923/front_fr.5.200.jpg",
      "product_display_name":"Tradition cremeux – Bel – 200 g",
      "url":"https://world.openfoodfacts.org/product/3073781065923/tradition-cremeux-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"12.5 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":46.4705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"8.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":6,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 7 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":32,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781193060",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/119/3060/front_pt.8.200.jpg",
      "product_display_name":"Original – A Vaca que ri – 125 g",
      "url":"https://world.openfoodfacts.org/product/3073781193060/original-a-vaca-que-ri"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"40 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":48,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175460030083",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/546/003/0083/front_fr.19.200.jpg",
      "product_display_name":"Fromage à l'échalote et à la ciboulette – Bel – 150 g",
      "url":"https://world.openfoodfacts.org/product/3175460030083/fromage-a-l-echalote-et-a-la-ciboulette-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":35.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":13.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"8.5 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":60.5882352941176,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"5.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":18,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":32,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781193169",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/119/3169/front_pt.19.200.jpg",
      "product_display_name":"Light – A Vaca que ri – 125 g",
      "url":"https://world.openfoodfacts.org/product/3073781193169/light-a-vaca-que-ri"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"25 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":15,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"17 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 4 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":49,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780832717",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/083/2717/front_en.41.200.jpg",
      "product_display_name":"Mini-Babybel Emmental x6 – 120 g",
      "url":"https://world.openfoodfacts.org/product/3073780832717/mini-babybel-emmental-x6"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"39 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":1,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175460000024",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/546/000/0024/front_fr.10.200.jpg",
      "product_display_name":"Boursin ail & fines herbes – BEL – 80g",
      "url":"https://world.openfoodfacts.org/product/3175460000024/boursin-ail-fines-herbes-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":45,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"38.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":1.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"26 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"en:celery in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-celery.svg",
                  "id":"allergens_no_celery",
                  "match":0,
                  "name":"Celery",
                  "status":"known",
                  "title":"Contains: Celery"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"12 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":47,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781040678",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/104/0678/front_fr.37.200.jpg",
      "product_display_name":"Boursin® Figues et 3 Noix Portion x10 – Bel – 160 g",
      "url":"https://world.openfoodfacts.org/product/3073781040678/boursin-figues-et-3-noix-portion-x10-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":17.4090909090909,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":10.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"29 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":11,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 9 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":33,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780959551",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/095/9551/front_fr.14.200.jpg",
      "product_display_name":"Maredsous Double crème – Bel – 250 g e",
      "url":"https://world.openfoodfacts.org/product/3073780959551/maredsous-double-creme-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":25.2941176470588,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"12.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":46,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781070286",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/107/0286/front_fr.59.200.jpg",
      "product_display_name":"La Vache qui rit 16 portions – Bel – 280 g",
      "url":"https://world.openfoodfacts.org/product/3073781070286/la-vache-qui-rit-16-portions-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"27.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":12.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"18.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":49,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781069730",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/106/9730/front_fr.79.200.jpg",
      "product_display_name":"Babybel FAMILIAL – Bel – 380 g",
      "url":"https://world.openfoodfacts.org/product/3073781069730/babybel-familial-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.23 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":33.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"39 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":1,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"26 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175460000017",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/546/000/0017/front_en.134.200.jpg",
      "product_display_name":"Garlic & Herbs Soft French Cheese – Bel – 150g",
      "url":"https://world.openfoodfacts.org/product/3175460000017/garlic-herbs-soft-french-cheese-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":43.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":8,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073780897358",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/089/7358/front_en.39.200.jpg",
      "product_display_name":"Mini Light – Babybel – 240 g (12 x 20 g)",
      "url":"https://world.openfoodfacts.org/product/3073780897358/mini-light-babybel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":17.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"17.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":28.8235294117647,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"11.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":47,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781149937",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/114/9937/front_en.32.200.jpg",
      "product_display_name":"Vache Qui Rit – Bel – 512 g",
      "url":"https://world.openfoodfacts.org/product/3073781149937/vache-qui-rit-bel"
   }
]
;
var product_type = "food";
</script>
<script src="https://static.openfoodfacts.org/js/product-preferences.js"></script>
<script src="https://static.openfoodfacts.org/js/product-search.js"></script>

<script>
$(document).foundation({
	equalizer : {
		equalize_on_stack: true
	},
	accordion: {
		callback : function (accordion) {
			$(document).foundation('equalizer', 'reflow');
		}
	}
});

</script>
<script type="application/ld+json">
{
	"@context" : "https://schema.org",
	"@type" : "WebSite",
	"name" : "Open Food Facts",
	"url" : "https://world.openfoodfacts.org",
	"potentialAction": {
		"@type": "SearchAction",
		"target": "https://world.openfoodfacts.org/cgi/search.pl?search_terms=?{search_term_string}",
		"query-input": "required name=search_term_string"
	}
}
</script>
<script type="application/ld+json">
{
	"@context": "https://schema.org/",
	"@type": "Organization",
	"url": "https://world.openfoodfacts.org",
	"logo": "https://static.openfoodfacts.org/images/logos/off-logo-vertical-light.svg",
	"name": "Open Food Facts",
	"sameAs" : ["https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web", "https://x.com/OpenFoodFacts"]
}
</script>





</body>
</html>

<!-- data_debug: data_debug start
platform: public
can_use_cache: 1
cache_hit
-->

<!-- end templates/web/common/site_layout.tt.html -->

  recorded_at: Sun, 15 Jun 2025 21:21:20 GMT
recorded_with: VCR 6.3.1
