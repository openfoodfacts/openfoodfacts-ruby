---
http_interactions:
- request:
    method: get
    uri: https://world.openfoodfacts.org/facets/numbers-of-ingredients/38/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.18.0
      Date:
      - Sun, 15 Jun 2025 21:45:26 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Sat, 14 Jun 2025 21:45:25 GMT
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Xss-Protection:
      - 1; mode=block
      X-Request-Id:
      - 5GtwfnZmxHPhHid9
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!-- start templates/web/common/site_layout.tt.html -->

<!doctype html>
<html class="no-js" lang="en" data-serverdomain="openfoodfacts.org" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>38</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta property="fb:app_id" content="219331381518041">
    <meta property="og:type" content="food">
    <meta property="og:title" content="38">
    <meta property="og:url" content="https://world.openfoodfacts.org/facets/numbers-of-ingredients/38/1">
    
    <meta property="og:image" content="https://static.openfoodfacts.org/images/logos/off-logo-vertical-white-social-media-preview.png">
    <meta property="og:description" content="A collaborative, free and open database of ingredients, nutrition facts and information on food products from around the world">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/off/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/off/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/off/favicon-16x16.png">
<link rel="manifest" href="/images/favicon/off/site.webmanifest">
<link rel="mask-icon" href="/images/favicon/off/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/images/favicon/off/favicon.ico">
<meta name="msapplication-TileColor" content="#00aba9">
<meta name="msapplication-config" content="/images/favicon/off/browserconfig.xml">
<meta name="theme-color" content="#ffffff">

	<meta name="apple-itunes-app" content="app-id=588797948">
    <link rel="canonical" href="https://world.openfoodfacts.org/facets/numbers-of-ingredients/38/1">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/app-ltr.css?v=1749629930" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/jqueryui/themes/base/jquery-ui.css" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/select2.min.css">
    <link rel="search" href="https://world.openfoodfacts.org/cgi/opensearch.pl" type="application/opensearchdescription+xml" title="Open Food Facts">
    <script type="module" src="https://static.openfoodfacts.org/js/dist/off-webcomponents.bundled.js"></script>
	
    <style media="all">
        .show-when-no-access-to-producers-platform {display:none}
.show-when-logged-in {display:none}

		
		.badge-container{
			margin: 0 auto;
		}

		.badge-container img{
			margin: 5px;
		}
		@media only screen and (max-width: 537px ) and (min-width: 280px) {
			.badge-container{
				width: 280px;
			}
		}
		@media only screen and (max-width: 279px ){
			.badge-container{
				width: 130px;
			}
		}
    </style>
</head>
<body class="products_page">

	<!-- Matomo -->
<script>
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.openfoodfacts.org"]);
  _paq.push(["setDomains", ["*.openfoodfacts.org"]]);
  _paq.push(["setDoNotTrack", true]);
  _paq.push(["disableCookies"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//analytics.openfoodfacts.org/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '5']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//analytics.openfoodfacts.org/matomo.php?idsite=5&amp;rec=1" style="border:0;" alt="" /></p></noscript>
<!-- End Matomo Code -->



	
	<div class="skip"><a href="#content" tabindex="0">Skip to Content</a></div>
	

	<div id="barcode-scanner-modal" class="modal is_hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <span><h2>Scan a product<h2></span>
      <button class="modal-close-button">&times;</button>
    </div>
    <div>
      <barcode-scanner id="barcode-scanner"></barcode-scanner>
    </div>
    <div>
    </div>
    <div >
      <label for="barcode-modal-input">Or enter barcode manually</label>
      <div class="barcode-modal-group">
        <input type="text" id="barcode-modal-input" class="barcode-modal-input" inputmode="numeric" pattern="\d*" />
        <button class="barcode-modal-button button" id="barcode-modal-button" disabled>Scan</button>
      </div>
    </div>
  </div>
</div>

<script src="https://static.openfoodfacts.org/js/dist/barcode-scanner.js"></script>


	<div id="page">
		
		<div class="upper-nav contain-to-grid"  id="upNav">
			<nav class="top-bar " data-topbar role="navigation">
				
				<section class="top-bar-section">
					
					<!-- Left Nav Section -->
					<ul class="left">

						<li class="has-dropdown">
							<a id="menu_link">
								<span class="material-icons">
									menu
								</span>
							</a>
							<ul class="dropdown">				
								
									<li><a href="/discover">Discover</a></li>
									<li><a href="/contribute">Contribute</a></li>
									<li class="divider"></li>
									<li><label>Add products</label></li>
                <!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
									<li><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=pro_platform_install_the_app_to_add_products_en">Install the app to add products</a></li>
									<li><a href="/cgi/product.pl?type=search_or_add&action=display">Add a product</a></li>
								

								<li class="divider"></li>
								<li><label>Search and analyze products</label></li>

								<li>
									<a href="/cgi/search.pl">Advanced search</a>
								</li>
								<li>
									<a href="/cgi/search.pl?graph=1">Graphs and maps</a>
								</li>
								
							</ul>
						</li>
						
						<li>
							<ul class="country_language_selection">
								<li class="has-form has-dropdown" id="select_country_li">
									<select id="select_country" style="width:100%" data-placeholder="Country">
										<option></option>
									</select>
								</li>
								<li class="has-dropdown">
									<a href="https://world.openfoodfacts.org/">English</a>

									<ul class="dropdown">
										
									</ul>
								</li>
							</ul>
						</li>
					</ul>


					<!-- Right Nav Section -->
					
					<ul class="right">
						
							<li class="h-space-tiny has-form">
								<a href="/cgi/session.pl" class="round button secondary">
									<span class="material-icons material-symbols-button">account_circle</span>
									Sign in
								</a>
							</li>
						
					</ul>
				</section>
			</nav>
		</div>
		

		<div id="main_container" style="position:relative" class="block_latte">
		
		
		<div class="topbarsticky">
			<div class="contain-to-grid " id="offNav" >
				<nav class="top-bar" data-topbar role="navigation" >

					<ul class="title-area">
						<li class="name">
							<div style="position:relative;max-width:292px;">
								<a href="/">
								<img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;">
								
							</a>
							</div>
						</li>
					</ul>

					
					
					<section class="top-bar-section">
					
						<ul class="left small-4">
							<li class="search-li">
							
								<form action="/cgi/search.pl">
								<div class="row"><div class="small-12">
								<div class="row collapse postfix-round">
									<div class="columns">
									<input type="text" placeholder="Search for a product" name="search_terms" value="" style="background-color:white">
									<input name="search_simple" value="1" type="hidden">
									<input name="action" value="process" type="hidden">
									</div>
									<div class="columns postfix-button-wrapper">
									<button type="submit" title="Search" class="button postfix" style="line-height:normal"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
									</div>
									<div class="columns postfix-button-wrapper is_hidden">
  <button
    type="button"
    title="Scan a product"
    class="button barcode-scanner-button"
    id="barcode-scanner-button"
  >
    <svg style="width:24px;height:24px" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M2,6H4V18H2V6M5,6H6V18H5V6M7,6H10V18H7V6M11,6H12V18H11V6M14,6H16V18H14V6M17,6H20V18H17V6M21,6H22V18H21V6Z"/></svg>
  </button>

  <script src="https://static.openfoodfacts.org/js/dist/barcode-scanner-button.js"></script>
</div>

								</div>
								</div></div>
								</form>
							</li>
						</ul>
					<ul class="search_and_links">
						<li><a href="/discover" class="top-bar-links">Discover</a></li>
						<li><a href="/contribute" class="top-bar-links">Contribute</a></li>
						<li class="show-for-xlarge-up"><a href="https://world.pro.openfoodfacts.org/" class="top-bar-links">Producers</a></li>
						<li class="flex-grid getapp"><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=search_and_links_promo_en" class="buttonbar button" style="top:0;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <span class="bt-text">Get the app</span></a></li>
				<!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
          </ul>
					</section>
					
				</nav>
			</div>
		</div>

	
	
		<nav class="tab-bar hide">
			<div class="left-small">
				<a href="#idOfLeftMenu" role="button" aria-controls="idOfLeftMenu" aria-expanded="false" class="left-off-canvas-toggle button postfix anonymous">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
				</a>
			</div>
			<div class="middle tab-bar-section">
				<form action="/cgi/search.pl">
					<div class="row collapse">
						<div class="small-8 columns">
							<input type="text" placeholder="Search for a product" name="search_terms">
							<input name="search_simple" value="1" type="hidden">
							<input name="action" value="process" type="hidden">
						</div>
						<div class="small-2 columns">
							<button type="submit" class="button postfix"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
						</div>
						<div class="small-2 columns">
							<a href="/cgi/search.pl" title="Advanced search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg></a>
						</div>
					</div>
				</form>
			</div>
		</nav>
		

		<div id="content" class="off-canvas-wrap block_latte" data-offcanvas>
			<div class="inner-wrap">
			
				<a class="exit-off-canvas"></a>

				
				
				<!-- full width banner on mobile -->
				
				

				

				<div class="main block_light">
					<div id="main_column">

						
						
							
							
								<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

								

<section id="donation-banner-top" class="donation-banner row">
  <div class="donation-banner__left-aside">
    <div class="donation-banner__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div class="donation-banner__aside">
      <div class="donation-banner__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <div style="padding:1rem;">
        <p>Your donations fund the day-to-day operations of our non-profit association:</p>
        <ul>
          <li>
            keeping our database open & available to all,
            <ul>
              <li>technical infrastructure (website/mobile app) & a small permanent team</li>
            </ul>
          </li>
          <li>
            <p>remain independent of the food industry,</p>
          </li>
          <li>
            <p>engage a community of committed citizens,</p>
          </li>
          <li>
            <p>support the advancement of public health research.</p>
          </li>
        </ul>
      </div>
    </div>
    <div class="donation-banner__actions-section">
      <div class="donation-banner__actions-section__financial">
        <p>
          
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
          
        </p>
      </div>
      <div class="donation-banner__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
  <div class="donation-banner__close">
    <button id="hide-donate-banner" class="material-icons modest" onclick="DonationButton();" onkeypress="DonationButton();">close</button>
  </div>
</section>

<script>
  let d = new Date();
  let bannerID = document.getElementById('donation-banner-top');
  let getDomain = window.location.origin.split('.');

  function setBannerCookie(bcname, bcval, bcexdays) {
    d.setTime(d.getTime() + (bcexdays*60*60*24*1000));
    let expires = 'expires=' + d.toUTCString();
    // Apply cookie for every domain contains open...facts
    let domain = 'domain=.' + getDomain.slice(1).join('.');
    document.cookie = bcname + '=' + bcval + ';' + expires + ';' + domain + ';SameSite=None;Secure;path=/';
  }

  function getBannerCookie(bcname) {
    const name = bcname + '=';
    const decodedCookies = decodeURIComponent(document.cookie);
    const cookies = decodedCookies.split(';');
    for (const cookie of cookies) {
      let c = cookie;
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
    }

    return '';
  }

  function DonationButton() {
    setBannerCookie('off_donation_banner_2024_a', 1, 180);
    bannerID.style.display = 'none';
  }

  if (getBannerCookie('off_donation_banner_2024_a') !== '') {
    bannerID.style.display = 'none';
  } else {
    bannerID.style.display = 'flex';
  }
</script>


							
						
						
            			
						
							
								<!-- some lists of products for facets (e.g. brands) have microformats data -->
								<div itemscope itemtype="https://schema.org/Thing">
									<div class="row">
										<div class="small-12 column v-space-short">
											<h1 itemprop="name">38</h1>
										</div>
									</div>
								  <!-- start templates/web/pages/tag/tag.tt.html -->
<div class="tag">
    <div class="row">
        <div class="large-6 column">

            <div class="tag_navigation">
                
                    <a href="/facets/numbers-of-ingredients">Number of ingredients</a>:
                    <a href="/facets/numbers-of-ingredients/38">38</a>
                    
                
            </div>

            

                

                

                

                

                

                

            

            

            
        </div>

        
            

            <div class="large-6 column">                
            <!-- injecting facet-knowledge-panel -->
            <div id="facet-knowledge-panel" style="margin-left: 70px; z-index: 1;">
                <h2 id="facet_panels_title"></h2>
                <div id="facet_panels_content"></div>
            </div>
            <!-- Fetching facet knowledge panel -->                
            <script>
                    let facet_kp = "https://facets-kp.openfoodfacts.org/render-to-html";
                    let params = "?facet_tag=ingredients_n&value_tag=";
                    if ("") {
                        params += "&sec_facet_tag=&sec_value_tag="
                    }

                    // Adding language code to get translated data
                    params += "&lang_code=en&country=world";

                    fetch(facet_kp + params)
                        .then((response) => {
                            if (response.ok) {
                                return response.text();
                            }
                            else {
                                throw new Error("Network Response Error while fetching facet kp");

                            }
                        })
                        .then(data => {
                            let title = document.getElementById("facet_panels_title");
                            title.innerHTML = "Facet knowledge panel";
                            let knowledgepanel = document.getElementById("facet_panels_content");
                            knowledgepanel.innerHTML = data;
                            // Keeping Hungergames and Lastedits panel open by default
                            jQuery("#HungerGames").attr("open", true);
                            jQuery("#LastEdits").attr("open", true);

                        })
                </script>
            </div>
            
        
    </div>
</div>

<!-- end templates/web/pages/tag/tag.tt.html -->
<!-- start templates/web/common/includes/list_of_products.tt.html --> 

<div class="row">
  <div class="small-12 columns"> 
    
    
      
      
      
      <!-- display a permalink if the url is for a script that may have POST parameters -->
      
    
    
  </div>
</div>

 

<div class="block short block_ristreto">
  <div class="row">
    <div class="small-12 columns filterProducts">
      <div>
        <span class="filterProducts__results">
          <span class="material-icons" aria-hidden="true">search</span>
          5,280 products
        </span>
      </div>
      <div class="filterProducts__buttons">
        <div>
          <button href="#" data-dropdown="drop_sort" aria-controls="drop_sort" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">swap_vert</span>
            
          </button>
          <ul id="drop_sort" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/numbers-of-ingredients/38?sort_by=popularity" onclick="$.cookie('last_sort_by', 'popularity', { expires: 180, path: '/' });">Most scanned products</a>
            </li>
        
            <li>
              <a href="/facets/numbers-of-ingredients/38?sort_by=nutriscore_score" onclick="$.cookie('last_sort_by', 'nutriscore_score', { expires: 180, path: '/' });">Products with the best Nutri-Score</a>
            </li>
        
            <li>
              <a href="/facets/numbers-of-ingredients/38?sort_by=environmental_score_score" onclick="$.cookie('last_sort_by', 'environmental_score_score', { expires: 180, path: '/' });">Products with the best Green-Score</a>
            </li>
        
            <li>
              <a href="/facets/numbers-of-ingredients/38?sort_by=created_t" onclick="$.cookie('last_sort_by', 'created_t', { expires: 180, path: '/' });">Recently added products</a>
            </li>
        
            <li>
              <a href="/facets/numbers-of-ingredients/38?sort_by=last_modified_t" onclick="$.cookie('last_sort_by', 'last_modified_t', { expires: 180, path: '/' });">Recently modified products</a>
            </li>
        
          </ul>
        </div>
        
        
        <div>
          <button href="#" data-dropdown="drop1" aria-controls="drop1" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">sort</span>
            Explore products by...
          </button>
          <ul id="drop1" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/countries" rel="nofollow">Countries</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/nutrition-grades" rel="nofollow">Nutrition grades</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/nova-groups" rel="nofollow">NOVA groups</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/environmental-score" rel="nofollow">Green-Score</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/brands" rel="nofollow">Brands</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/categories" rel="nofollow">Categories</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/labels" rel="nofollow">Labels</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/packaging" rel="nofollow">Packaging</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/origins" rel="nofollow">Origins of ingredients</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/manufacturing-places" rel="nofollow">Manufacturing or processing places</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/packager-codes" rel="nofollow">Traceability codes</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/ingredients" rel="nofollow">Ingredients</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/additives" rel="nofollow">Additives</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/vitamins" rel="nofollow">Added vitamins</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/minerals" rel="nofollow">Added minerals</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/amino-acids" rel="nofollow">Added amino acids</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/nucleotides" rel="nofollow">Added nucleotides</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/other-nutritional-substances" rel="nofollow">Other nutritional substances added</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/allergens" rel="nofollow">Allergens</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/traces" rel="nofollow">Traces</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/misc" rel="nofollow">Miscellaneous</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/languages" rel="nofollow">Languages</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/contributors" rel="nofollow">Contributors</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/states" rel="nofollow">States</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/data-sources" rel="nofollow">Data sources</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/entry-dates" rel="nofollow">Entry dates</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/last-edit-dates" rel="nofollow">Last edit dates</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/last-check-dates" rel="nofollow">Last check dates</a>
            </li>
          
            <li>
              <a href="/facets/numbers-of-ingredients/38/teams" rel="nofollow">Teams</a>
            </li>
          
          </ul>
        </div>
        
        
      </div>
    </div>
  </div>
</div>


<div class="row">
	<div class="small-12 columns">
    <div id="preferences_selected" class="small-12 flex-grid v-space-short v-align-center direction-row full-width v-align-between"></div>
    <div id="preferences_selection_form" style="display:none"></div>
  </div>
</div>

	 
<div class="row">
<div class="large-12 columns">
    
    <div id="search_results" style="clear:left;">
        <ul class="products">
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
		</ul>
  </div>
      
    
	<ul id="pages" class="pagination"><li class="unavailable">Pages:</li><li class="current"><a href="">1</a></li><li><a href="/facets/numbers-of-ingredients/38/2">2</a></li><li><a href="/facets/numbers-of-ingredients/38/3">3</a></li><li><a href="/facets/numbers-of-ingredients/38/4">4</a></li><li class="unavailable">&hellip;</li><li><a href="/facets/numbers-of-ingredients/38/104">104</a></li><li><a href="/facets/numbers-of-ingredients/38/105">105</a></li><li><a href="/facets/numbers-of-ingredients/38/106">106</a></li><li><a href="/facets/numbers-of-ingredients/38/2" rel="next$nofollow">Next</a></li><li class="unavailable">(50 products per page)</li></ul>

  </div>
</div>


<!-- end templates/web/common/includes/list_of_products.tt.html -->

								</div>
							
						
					</div>
				</div>
			</div>
		</div>
		</div>

		
		<footer>
			<div class="block_light bg-white" id="install_the_app_block">
				<div class="row">
					<div class="small-12 flex-grid v-space-short v-align-center direction-row h-space-tiny">
						<div class="cell small-100 medium-100 large-50 flex-grid v-align-center direction-row">
							<img class="cell small-50 v-align-center" src="/images/illustrations/app-icon-in-the-clouds.svg" alt="The Open Food Facts logo in the cloud" style="height:120px">
							<div class="cell small-50 v-align-center" id="footer_scan" style="display:block">
								<div id="footer_install_the_app">
									Install the app!
								</div>
								Scan your <span id="everyday">everyday</span> <span id="foods">foods</span>
							</div>
						</div>
						<div class="row">
							<div class="small-12 medium-12 large-12 v-space-normal column badge-container">
								<!-- android_app_link - https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner&hl=en -->
								<a  href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner&utm_source=off&utf_medium=web&utm_campaign=install_the_app_android_footer_en"><img src="/images/misc/playstore/img/latest/GetItOnGooglePlay_Badge_Web_color_English.svg" alt="Get It On Google Play" loading="lazy" height="40" width="120"></a>
								
								<a href="https://f-droid.org/packages/openfoodfacts.github.scrachx.openfood"><img src="/images/misc/f-droid/svg/get-it-on-en.svg" alt="Available on F-Droid" loading="lazy" height="40" width="120"></a>

								<!-- android_apk_app_link - https://world.openfoodfacts.org/images/apps/off.apk -->
								<a href="https://github.com/openfoodfacts/smooth-app/releases/latest?utm_source=off&utf_medium=web&utm_campaign=install_the_app_apk_footer_en"><img src="/images/misc/app-landing-page/download-apk/download-apk_en.svg" alt="Android APK" loading="lazy" height="40" width="120"></a>
								
								<!-- msgid "https://apps.apple.com/app/open-beauty-facts/id1122926380" -->
								<a href="https://apps.apple.com/app/open-food-facts/id588797948?utm_source=off&utf_medium=web&utm_campaign=install_the_app_ios_footer_en"><img src="/images/misc/appstore/black/appstore_US.svg" alt="Download on the App Store"  loading="lazy" height="40" width="120"></a>
							</div>
						</div>
					</div>
				</div>
			</div>

			
      			<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

				

<section class="donation-banner-footer row">
  <div class="donation-banner-footer__left-aside">
    <div class="donation-banner-footer__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div>
      <div class="donation-banner-footer__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner-footer__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <p>Your donations fund the day-to-day operations of our non-profit association:</p>
      <ul>
        <li>
          keeping our database open & available to all,
          <ul>
            <li>technical infrastructure (website/mobile app) & a small permanent team</li>
          </ul>
        </li>
        <li>
          <p>remain independent of the food industry,</p>
        </li>
        <li>
          <p>engage a community of committed citizens,</p>
        </li>
        <li>
          <p>support the advancement of public health research.</p>
        </li>
      </ul>
    </div>
    <div class="donation-banner-footer__actions-section">
      <div class="donation-banner-footer__actions-section__financial">
        <p>
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
        </p>
      </div>
      <div class="donation-banner-footer__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
</section>


			
      		
			<div class="block_light block_cappucino" id="contribute_and_discover_links_block">
				<div class="row">
					<div class="small-12 large-6 columns v-space-normal block_off">
						<h3 class="title-5 text-medium">Join the community</h3>
						<p>Discover our <a href="/code-of-conduct">Code of conduct</a></p>
						<p>Join us on <a href="https://slack.openfoodfacts.org">Slack</a></p>
						<p><a href="https://forum.openfoodfacts.org/">Forum</a></p>
						<p id="footer_social_icons">Follow us: 
							<a href="https://x.com/OpenFoodFacts"><img src="/images/icons/dist/x.svg" class="footer_social_icon" alt="x"></a>
							<a href="https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web"><img src="/images/icons/dist/facebook.svg" class="footer_social_icon" alt="Facebook"></a>
							<a href="https://www.instagram.com/open.food.facts/"><img src="/images/icons/dist/instagram.svg" class="footer_social_icon" alt="Instagram"></a>
							
						</p>
						<p><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></p>
					</div>
					<div class="small-12 large-6 columns project v-space-normal">
						<h3 class="title-5 text-medium">Discover the project</h3>
						<ul class="inline-list tags_links v-space-tiny h-space-tiny" >
							<li><a class="button small white-button radius" href="/who-we-are">Who we are</a></li>
							<li><a class="button small white-button radius" href="https://world.openfoodfacts.org/open-food-facts-vision-mission-values-and-programs">Vision, Mission, Values and Programs</a></li>
							<li><a class="button small white-button radius" href="https://support.openfoodfacts.org/help/en-gb">Frequently asked questions</a></li>
							<li><a class="button small white-button radius" href="https://blog.openfoodfacts.org/en/">Open Food Facts blog</a></li>
							<li><a class="button small white-button radius" href="/press">Press</a></li>
							<li><a class="button small white-button radius" href="https://wiki.openfoodfacts.org">Open Food Facts wiki (en)</a></li>
							<li><a class="button small white-button radius" href="/cgi/top_translators.pl">Translators</a></li>
							<li><a class="button small white-button radius" href="/partners">Partners</a></li>
							<li><a class="button small white-button radius" href="https://world.openbeautyfacts.org">Open Beauty Facts - Cosmetics</a></li>
							<li><a class="button small white-button radius" href="https://world.pro.openfoodfacts.org/">Open Food Facts for Producers</a></li>
						</ul>
					</div>
				</div>
			</div>

			<div class="block_off block_dark block_ristreto" id="footer_block">

				<div id="footer_block_image_banner_outside">
					<div id="footer_block_image_banner_outside2">

						<div class="row">

							<div class="small-12 text-center v-space-short h-space-large">
								<a href="/" style="font-size:1rem;"><img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-mono-white.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;"></a>

								<p>A collaborative, free and open database of food products from around the world.</p>
								
								<ul class="inline-list text-center text-small">
									<li><a href="/legal">Legal</a></li>
									<li><a href="/privacy">Privacy</a></li>
									<li><a href="/terms-of-use">Terms of use</a></li>
									<li><a href="/data">Data, API and SDKs</a></li>
									<li><a href="https://world.openfoodfacts.org/donate-to-open-food-facts">Donate to Open Food Facts</a></li>
									<li><a href="https://world.pro.openfoodfacts.org/">Producers</a></li>
									<li><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></li>
								</ul>
							</div>

						</div>

					</div>
				</div>
			</div>
		</footer>
		

	</div>

<script src="https://static.openfoodfacts.org/js/dist/modernizr.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery-ui.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/hc-sticky.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/display.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/stikelem.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/scrollNav.js"></script>
  

<script>
$(function() {
display_user_product_preferences("#preferences_selected", "#preferences_selection_form", function () {
	rank_and_display_products("#search_results", products, contributor_prefs);
});
rank_and_display_products("#search_results", products, contributor_prefs);


});
</script>



<script src="https://static.openfoodfacts.org/js/dist/foundation.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.cookie.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/select2.min.js"></script>
<script type="text/javascript">
var page_type = "products";
var default_preferences = {"ecoscore":"important","nova":"important","nutriscore":"very_important"};
var preferences_text = "Classify the 50 products below according to your preferences";
var contributor_prefs = {"display_barcode":null,"edit_link":null};
var products = [
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":43.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.0444 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":97.04,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"11.6 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":49.6470588235294,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"4.67 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":25.6571428571429,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":0,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Contains: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":62,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"20060831",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/006/0831/front_en.40.200.jpg",
      "product_display_name":"Crownfield Premium Fruit and Nut Muesli – Lidl – 750g",
      "url":"https://world.openfoodfacts.org/product/20060831/crownfield-premium-fruit-and-nut-muesli-lidl"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.7 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":60,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"3.1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":52.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":56,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3175681077324",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/317/568/107/7324/front_en.96.200.jpg",
      "product_display_name":"Gerblé - Chocolate Almond Cookie, 200g (7.1oz) – 200 g",
      "url":"https://world.openfoodfacts.org/product/3175681077324/gerble-chocolate-almond-cookie-200g-7-1oz"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":9.63636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.24 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":84,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"24 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":16,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":53,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6291003203527",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/629/100/320/3527/front_en.24.200.jpg",
      "product_display_name":"Break Chocolate Fingers – 31 g",
      "url":"https://world.openfoodfacts.org/product/6291003203527/break-chocolate-fingers"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":47.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.34 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":78,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"1.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":85.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":54,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210444127",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/044/4127/front_fr.93.200.jpg",
      "product_display_name":"Melloeux Fruit Rouges – BelVita – 250 g",
      "url":"https://world.openfoodfacts.org/product/7622210444127/melloeux-fruit-rouges-belvita"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.62 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":64,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"14 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":41.1764705882353,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"3.6 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":44,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":31,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210713803",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/071/3803/front_en.80.200.jpg",
      "product_display_name":"Petit Déjeuner Chocolat – Belvita – 600 g e",
      "url":"https://world.openfoodfacts.org/product/7622210713803/petit-dejeuner-chocolat-belvita"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":14.8181818181818,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.75 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":3.33333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"37.4 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":2.64,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"6.17 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":15.32,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/10-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"11 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":50,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.9517214912281,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111184007625",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/118/400/7625/front_fr.3.200.jpg",
      "product_display_name":"Sauce andalouse – Star",
      "url":"https://world.openfoodfacts.org/product/6111184007625/sauce-andalouse-star"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":7.90909090909091,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.33 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":78.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"33 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":7,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"19 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-f.svg",
                  "id":"ecoscore",
                  "match":9,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score F"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210834386",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/083/4386/front_en.22.200.jpg",
      "product_display_name":"Milka – 100 g",
      "url":"https://world.openfoodfacts.org/product/7622210834386/milka"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (30 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111265980212",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/126/598/0212/front_en.20.200.jpg",
      "product_display_name":"",
      "url":"https://world.openfoodfacts.org/product/6111265980212"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2.2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":10.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0.8 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":89.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5010338301491",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/501/033/830/1491/front_en.3.200.jpg",
      "product_display_name":"Thai green curry paste – Blue Dragon – 170 g",
      "url":"https://world.openfoodfacts.org/product/5010338301491/thai-green-curry-paste-blue-dragon"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":13.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"9.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":56,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"4.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":28.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"en:fish in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-fish.svg",
                  "id":"allergens_no_fish",
                  "match":20,
                  "name":"Fish",
                  "status":"known",
                  "title":"May contain: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":57,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":98.2156311605723,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5997523313111",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/599/752/331/3111/front_de.87.200.jpg",
      "product_display_name":"Soba classic – NISSIN – 90g",
      "url":"https://world.openfoodfacts.org/product/5997523313111/soba-classic-nissin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.28 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":81.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"17.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":29.6705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"5.97 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":16.12,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (10 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/5-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"5 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-f.svg",
                  "id":"ecoscore",
                  "match":14,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score F"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.5028444444444,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111259346239",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/125/934/6239/front_fr.15.200.jpg",
      "product_display_name":"Be – 40g",
      "url":"https://world.openfoodfacts.org/product/6111259346239/be"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "description_short":"14.2 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":40.4705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"3.56 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":44.6857142857143,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":32,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210740427",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/074/0427/front_en.29.200.jpg",
      "product_display_name":"BelVita Chocolate Chips – Belcita – 225g",
      "url":"https://world.openfoodfacts.org/product/7622210740427/belvita-chocolate-chips-belcita"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.7 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":60,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"7.8 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":63.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.9 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":88,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":20,
                  "name":"Gluten",
                  "status":"known",
                  "title":"May contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"en:lupin in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":20,
                  "name":"Lupin",
                  "status":"known",
                  "title":"May contain: Lupin"
               },
               {
                  "debug":"en:fish in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-fish.svg",
                  "id":"allergens_no_fish",
                  "match":0,
                  "name":"Fish",
                  "status":"known",
                  "title":"Contains: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":20,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"May contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/7-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"7 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":46,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":88.1517721948819,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3367651004878",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/336/765/100/4878/front_fr.123.200.jpg",
      "product_display_name":"Brulle fraîcheur – Daunat – 250 g",
      "url":"https://world.openfoodfacts.org/product/3367651004878/brulle-fraicheur-daunat"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.65 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":62.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"16.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":33.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"6.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":14,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"en:peanuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":0,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Contains: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":0,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Contains: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"en:lupin in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":0,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Contains: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (8 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":82,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"20775018",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/077/5018/front_fr.31.200.jpg",
      "product_display_name":"Premium Knusper Müsli Trio Choc – Crownfield – 500 g",
      "url":"https://world.openfoodfacts.org/product/20775018/premium-knusper-musli-trio-choc-crownfield"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":49.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.9 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":50,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"6.1 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":69.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.4 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":47.4285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":30,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":100,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8480000044877",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/848/000/004/4877/front_es.56.200.jpg",
      "product_display_name":"Lasagna boloñesa – Hacendado – 350 g",
      "url":"https://world.openfoodfacts.org/product/8480000044877/lasagna-bolonesa-hacendado"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.71 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":59.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"5.1 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":72.5882352941177,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":84,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":20,
                  "name":"Gluten",
                  "status":"known",
                  "title":"May contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"en:fish in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-fish.svg",
                  "id":"allergens_no_fish",
                  "match":0,
                  "name":"Fish",
                  "status":"known",
                  "title":"Contains: Fish"
               },
               {
                  "debug":"en:crustaceans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":0,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Contains: Crustaceans"
               },
               {
                  "debug":"en:molluscs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":0,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Contains: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":33,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":93.2514255431903,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3270160697861",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/327/016/069/7861/front_fr.86.200.jpg",
      "product_display_name":"Paëlla à la Valenciana – Picard – 900 g",
      "url":"https://world.openfoodfacts.org/product/3270160697861/paella-a-la-valenciana-picard"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":53.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.6 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":65,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"5.7 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":70.4705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":52.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3242272250050",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/324/227/225/0050/front_fr.92.200.jpg",
      "product_display_name":"PastaBox - Tortellini Ricotta Epinards Sauce au parmesan – Sodebo – 280 g",
      "url":"https://world.openfoodfacts.org/product/3242272250050/pastabox-tortellini-ricotta-epinards-sauce-au-parmesan-sodebo"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":30,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"30 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":10,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"2.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":57.7142857142857,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/8-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"8 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":81,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5053990155385",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/505/399/015/5385/front_fr.29.200.jpg",
      "product_display_name":"Sour cream & onion – Pringles – 195 g",
      "url":"https://world.openfoodfacts.org/product/5053990155385/sour-cream-onion-pringles"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.95 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":47.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"14 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":41.1764705882353,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"4.8 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":23.4285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/7-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"7 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":20,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5050083542411",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/505/008/354/2411/front_fr.41.200.jpg",
      "product_display_name":"Céréales Trésor Kellogg's Chocolat Lait - 1kg – 1000 g",
      "url":"https://world.openfoodfacts.org/product/5050083542411/cereales-tresor-kellogg-s-chocolat-lait-1kg"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":9.63636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.272 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":81.8666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"37.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":2.7,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"17.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-f.svg",
                  "id":"ecoscore",
                  "match":12,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score F"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8000500180709",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/800/050/018/0709/front_fr.91.200.jpg",
      "product_display_name":"Kinder Bueno Mini – 108 g",
      "url":"https://world.openfoodfacts.org/product/8000500180709/kinder-bueno-mini"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.75 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":57.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"7.6 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":63.7647058823529,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"2.5 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":62.8571428571429,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/5-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"5 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":60,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.7556533333333,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3587221227609",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/358/722/122/7609/front_fr.73.200.jpg",
      "product_display_name":"Chinois crème pâtissière – La Fournée Dorée – 600 g",
      "url":"https://world.openfoodfacts.org/product/3587221227609/chinois-creme-patissiere-la-fournee-doree"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "description_short":"0.41 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":74.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"15 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":37.6470588235294,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8718836394621",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/871/883/639/4621/front_fr.40.200.jpg",
      "product_display_name":"Protein Bar Muscle Mass – Bodymass – 60 gram",
      "url":"https://world.openfoodfacts.org/product/8718836394621/protein-bar-muscle-mass-bodymass"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":47.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.1 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":40,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"8.4 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":60.9411764705882,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"2.4 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":64.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"en:fish in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-fish.svg",
                  "id":"allergens_no_fish",
                  "match":20,
                  "name":"Fish",
                  "status":"known",
                  "title":"May contain: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.048,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8001665712859",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/800/166/571/2859/front_en.4.200.jpg",
      "product_display_name":"Girasoli cèpes – Rana – 250 g",
      "url":"https://world.openfoodfacts.org/product/8001665712859/girasoli-cepes-rana"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":55.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.784 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":55.8,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"8.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":59.5294117647059,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.04 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":53.6,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.048,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8001665705042",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/800/166/570/5042/front_en.21.200.jpg",
      "product_display_name":"Prosciutto cotto mozzarella fresh tortelloni – Rana",
      "url":"https://world.openfoodfacts.org/product/8001665705042/prosciutto-cotto-mozzarella-fresh-tortelloni-rana"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":55.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":45,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"2.9 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":80.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.6 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":92,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/8-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"8 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":67,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3229820783017",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/322/982/078/3017/front_fr.36.200.jpg",
      "product_display_name":"Nouilles de blé instantanées saveur poulet – Tien Shan – 85 g",
      "url":"https://world.openfoodfacts.org/product/3229820783017/nouilles-de-ble-instantanees-saveur-poulet-tien-shan"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.17 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":88.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"13.6 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":42.5882352941177,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"6.4 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":14.4,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":0,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Contains: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":68,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3250392415068",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/325/039/241/5068/front_fr.68.200.jpg",
      "product_display_name":"Muesli Crisp 5 Fruits – Chabrior – 500 g",
      "url":"https://world.openfoodfacts.org/product/3250392415068/muesli-crisp-5-fruits-chabrior"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"10.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":52.4705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"4.6 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":26.8571428571429,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/10-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"10 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":57,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.0563434022257,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5997523311230",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/599/752/331/1230/front_en.43.200.jpg",
      "product_display_name":"SOBA Cup Yakitori Poulet – Nissin – 89 g",
      "url":"https://world.openfoodfacts.org/product/5997523311230/soba-cup-yakitori-poulet-nissin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":81,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.93 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":48.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"2.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":83.3333333333333,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":94.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (28 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":70,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8414897100590",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/841/489/710/0590/front_es.58.200.jpg",
      "product_display_name":"Pan multifibras – Mercadona – 600 g",
      "url":"https://world.openfoodfacts.org/product/8414897100590/pan-multifibras-mercadona"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.18 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":88,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"7.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":11.6,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (35 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a-plus.svg",
                  "id":"ecoscore",
                  "match":95,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A+"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.999987894694,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Helps producers in developing countries.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":100,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8711327371002",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/871/132/737/1002/front_en.58.200.jpg",
      "product_display_name":"Ben&Jerry's Half Baked 465ml – 406 g",
      "url":"https://world.openfoodfacts.org/product/8711327371002/ben-jerry-s-half-baked-465ml"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":13.0909090909091,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.6 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":65,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"22.9 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":17.1,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"14.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":42,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"20434090",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/043/4090/front_it.53.200.jpg",
      "product_display_name":"Cookie Island milk chocolate – Sondey – 225 g",
      "url":"https://world.openfoodfacts.org/product/20434090/cookie-island-milk-chocolate-sondey"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (20 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Energy drinks",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5054267000216",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/505/426/700/0216/front_en.15.200.jpg",
      "product_display_name":"Lucozade ENERGY – 500ml",
      "url":"https://world.openfoodfacts.org/product/5054267000216/lucozade-energy"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":45,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"10 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":55.2941176470588,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"5.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":18.8,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":0,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Contains: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"en:fish in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-fish.svg",
                  "id":"allergens_no_fish",
                  "match":20,
                  "name":"Fish",
                  "status":"known",
                  "title":"May contain: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":80,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3700009271179",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/370/000/927/1179/front_fr.50.200.jpg",
      "product_display_name":"Pizza del gusto chevre miel – Mix – 380 g",
      "url":"https://world.openfoodfacts.org/product/3700009271179/pizza-del-gusto-chevre-miel-mix"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":45.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":20,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"4 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":76.4705882352941,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":81.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"en:fish in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-fish.svg",
                  "id":"allergens_no_fish",
                  "match":20,
                  "name":"Fish",
                  "status":"known",
                  "title":"May contain: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":77,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":100,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8001665723466",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/800/166/572/3466/front_en.3.200.jpg",
      "product_display_name":"Garlic & mozzarella gnocchi – Rana – 280g",
      "url":"https://world.openfoodfacts.org/product/8001665723466/garlic-mozzarella-gnocchi-rana"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.67 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":61.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"2.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":83.3333333333333,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":94.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (13 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (13 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":0,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Contains: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"en:celery in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-celery.svg",
                  "id":"allergens_no_celery",
                  "match":0,
                  "name":"Celery",
                  "status":"known",
                  "title":"Contains: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (13 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"en:fish in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-fish.svg",
                  "id":"allergens_no_fish",
                  "match":0,
                  "name":"Fish",
                  "status":"known",
                  "title":"Contains: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"en:molluscs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":20,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"May contain: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (13 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":27,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":100,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3248830770718",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/324/883/077/0718/front_fr.26.200.jpg",
      "product_display_name":"Nouilles à la Chinoise au Poulet, légumes croquants – Marie – 900 g e",
      "url":"https://world.openfoodfacts.org/product/3248830770718/nouilles-a-la-chinoise-au-poulet-legumes-croquants-marie"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"00002600",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/000/000/2600/front_en.52.200.jpg",
      "product_display_name":"Protein Drink Mix – Herbalife – 588 g",
      "url":"https://world.openfoodfacts.org/product/00002600/protein-drink-mix-herbalife"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"1.2 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":35,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"4.7 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":74,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":93.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":74,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5010338300999",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/501/033/830/0999/front_en.3.200.jpg",
      "product_display_name":"Lebanese Style Falafel – Al'Fez – 150g",
      "url":"https://world.openfoodfacts.org/product/5010338300999/lebanese-style-falafel-al-fez"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.57 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":5.73333333333334,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"36.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":3.7,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"2.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":57.7142857142857,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/7-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"7 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.9941666666667,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111184008240",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/118/400/8240/front_en.14.200.jpg",
      "product_display_name":"Sauce Burger – OK – 495g",
      "url":"https://world.openfoodfacts.org/product/6111184008240/sauce-burger-ok"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"1.14 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":38,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"12.4 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":46.8235294117647,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"2.4 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":64.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":20,
                  "name":"Gluten",
                  "status":"known",
                  "title":"May contain: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":0,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Contains: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (9 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":20,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"May contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":73,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"20791711",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/079/1711/front_ro.32.200.jpg",
      "product_display_name":"Hummus with capsicum and olives – Chef Select – 250g",
      "url":"https://world.openfoodfacts.org/product/20791711/hummus-with-capsicum-and-olives-chef-select"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":53.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.74 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":58,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"6.1 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":69.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.5 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":45.7142857142857,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"en:fish in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-fish.svg",
                  "id":"allergens_no_fish",
                  "match":0,
                  "name":"Fish",
                  "status":"known",
                  "title":"Contains: Fish"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":34,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3270160636914",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/327/016/063/6914/front_fr.57.200.jpg",
      "product_display_name":"Colin d'Alaska à la bordelaise et riz aux légumes – Formule express – 300 g",
      "url":"https://world.openfoodfacts.org/product/3270160636914/colin-d-alaska-a-la-bordelaise-et-riz-aux-legumes-formule-express"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":43.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.11 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":92.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"4.8 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":23.4285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":66,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4000521661106",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/400/052/166/1106/front_de.82.200.jpg",
      "product_display_name":"Vitalis Schokomüsli – Dr. Oetker – 600g",
      "url":"https://world.openfoodfacts.org/product/4000521661106/vitalis-schokomusli-dr-oetker"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.1 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":40,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"6.1 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":69.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"2.2 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":68,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"en:mustard in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":20,
                  "name":"Mustard",
                  "status":"known",
                  "title":"May contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"en:fish in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-fish.svg",
                  "id":"allergens_no_fish",
                  "match":20,
                  "name":"Fish",
                  "status":"known",
                  "title":"May contain: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"en:sulphur-dioxide-and-sulphites in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":20,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"May contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/5-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"5 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.048,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4056489009214",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/405/648/900/9214/front_de.62.200.jpg",
      "product_display_name":"Tortellini prosciutto crudo – Baresa – 250 g",
      "url":"https://world.openfoodfacts.org/product/4056489009214/tortellini-prosciutto-crudo-baresa"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":45.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.31 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":79.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":34.1176470588235,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":8,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":29,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3609200011532",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/360/920/001/1532/front_fr.12.200.jpg",
      "product_display_name":"Joyfuel goûts noisette chocolat noir – 55 g",
      "url":"https://world.openfoodfacts.org/product/3609200011532/joyfuel-gouts-noisette-chocolat-noir"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":45.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.66 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":62,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"1.5 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":90,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":94.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"en:peanuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":20,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"May contain: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"en:lupin in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":0,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Contains: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (6 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":29,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3250390751342",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/325/039/075/1342/front_fr.43.200.jpg",
      "product_display_name":"Céréales forme fruits rouges – Chabrior – 300 g",
      "url":"https://world.openfoodfacts.org/product/3250390751342/cereales-forme-fruits-rouges-chabrior"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":55.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":30,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"3 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":80,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":94.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/9-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"9 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":68,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5391521690494",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/539/152/169/0494/front_en.29.200.jpg",
      "product_display_name":"Sweet Potato Wraps 6 x (252g) – BFree – 6 x 42 g",
      "url":"https://world.openfoodfacts.org/product/5391521690494/sweet-potato-wraps-6-x-252g-bfree"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":12.2272727272727,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":10.2666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"34.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":5.5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (17 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/8-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"8 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":57,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8901491366052",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/890/149/136/6052/front_en.13.200.jpg",
      "product_display_name":"Puffcorn",
      "url":"https://world.openfoodfacts.org/product/8901491366052/puffcorn"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.7 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":60,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":34.1176470588235,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"1.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":81.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7622210547491",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/762/221/054/7491/front_fr.37.200.jpg",
      "product_display_name":"Barre moelleuse Cranberries & Noisettes – Belvita",
      "url":"https://world.openfoodfacts.org/product/7622210547491/barre-moelleuse-cranberries-noisettes-belvita"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"1.08 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":40.875,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"4.1 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":76.1176470588235,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.6 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":92,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (3 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5063089316764",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/506/308/931/6764/front_en.3.200.jpg",
      "product_display_name":"Olive & Rosemary Sourdough – Asda",
      "url":"https://world.openfoodfacts.org/product/5063089316764/olive-rosemary-sourdough-asda"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":9.63636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"2.6 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":5.33333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"21 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":19,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":12,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":20,
                  "name":"Nuts",
                  "status":"known",
                  "title":"May contain: Nuts"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":40,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.9999942105058,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0652655300006",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/065/265/530/0006/front_en.27.200.jpg",
      "product_display_name":"Butterscotch Crunch – Border Biscuits – 20 g",
      "url":"https://world.openfoodfacts.org/product/0652655300006/butterscotch-crunch-border-biscuits"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":53.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.26 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":32,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"38 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":2,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"4 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":37.1428571428571,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"en:peanuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":0,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Contains: Peanuts"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"38 ingredients (2 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":28,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5000358279658",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/500/035/827/9658/front_en.24.200.jpg",
      "product_display_name":"Sweet Chilli Coated Peanuts – Tesco",
      "url":"https://world.openfoodfacts.org/product/5000358279658/sweet-chilli-coated-peanuts-tesco"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"en:celery in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-celery.svg",
                  "id":"allergens_no_celery",
                  "match":20,
                  "name":"Celery",
                  "status":"known",
                  "title":"May contain: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"en:crustaceans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":20,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"May contain: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 38 ingredients (5 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/10-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"10 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":62,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4056489932406",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/405/648/993/2406/front_fr.3.200.jpg",
      "product_display_name":"Nouilles – Vitasia – 120 g",
      "url":"https://world.openfoodfacts.org/product/4056489932406/nouilles-vitasia"
   }
]
;
var product_type = "food";
</script>
<script src="https://static.openfoodfacts.org/js/product-preferences.js"></script>
<script src="https://static.openfoodfacts.org/js/product-search.js"></script>

<script>
$(document).foundation({
	equalizer : {
		equalize_on_stack: true
	},
	accordion: {
		callback : function (accordion) {
			$(document).foundation('equalizer', 'reflow');
		}
	}
});

</script>
<script type="application/ld+json">
{
	"@context" : "https://schema.org",
	"@type" : "WebSite",
	"name" : "Open Food Facts",
	"url" : "https://world.openfoodfacts.org",
	"potentialAction": {
		"@type": "SearchAction",
		"target": "https://world.openfoodfacts.org/cgi/search.pl?search_terms=?{search_term_string}",
		"query-input": "required name=search_term_string"
	}
}
</script>
<script type="application/ld+json">
{
	"@context": "https://schema.org/",
	"@type": "Organization",
	"url": "https://world.openfoodfacts.org",
	"logo": "https://static.openfoodfacts.org/images/logos/off-logo-vertical-light.svg",
	"name": "Open Food Facts",
	"sameAs" : ["https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web", "https://x.com/OpenFoodFacts"]
}
</script>





</body>
</html>

<!-- data_debug: data_debug start
platform: public
can_use_cache: 1
cache_miss
platform: public
can_use_cache: 1
cache_miss
no_off_query: 
off_query: 
platform: public
query_url: http://10.1.0.103:16001
can_use_off_query: 1
count tags using off_query
set_cache_results: updated
off_query parameter not set, or not sorting by popularity_key: not using off_query
got results from MongoDB
set_cache_results: updated
-->

<!-- end templates/web/common/site_layout.tt.html -->

  recorded_at: Sun, 15 Jun 2025 21:45:26 GMT
recorded_with: VCR 6.3.1
