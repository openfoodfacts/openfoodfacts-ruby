---
http_interactions:
- request:
    method: get
    uri: https://world.openfoodfacts.org/facets/last-edit-dates/2020-04/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.18.0
      Date:
      - Sun, 15 Jun 2025 21:21:40 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Expires:
      - Sat, 14 Jun 2025 21:21:40 GMT
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Xss-Protection:
      - 1; mode=block
      X-Request-Id:
      - tuLamFdiAgNk2Mrc
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!-- start templates/web/common/site_layout.tt.html -->

<!doctype html>
<html class="no-js" lang="en" data-serverdomain="openfoodfacts.org" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>2020-04</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta property="fb:app_id" content="219331381518041">
    <meta property="og:type" content="food">
    <meta property="og:title" content="2020-04">
    <meta property="og:url" content="https://world.openfoodfacts.org/facets/last-edit-dates/2020-04/1">
    
    <meta property="og:image" content="https://static.openfoodfacts.org/images/logos/off-logo-vertical-white-social-media-preview.png">
    <meta property="og:description" content="A collaborative, free and open database of ingredients, nutrition facts and information on food products from around the world">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/off/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/off/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/off/favicon-16x16.png">
<link rel="manifest" href="/images/favicon/off/site.webmanifest">
<link rel="mask-icon" href="/images/favicon/off/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/images/favicon/off/favicon.ico">
<meta name="msapplication-TileColor" content="#00aba9">
<meta name="msapplication-config" content="/images/favicon/off/browserconfig.xml">
<meta name="theme-color" content="#ffffff">

	<meta name="apple-itunes-app" content="app-id=588797948">
    <link rel="canonical" href="https://world.openfoodfacts.org/facets/last-edit-dates/2020-04/1">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/app-ltr.css?v=1749629930" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/jqueryui/themes/base/jquery-ui.css" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openfoodfacts.org/css/dist/select2.min.css">
    <link rel="search" href="https://world.openfoodfacts.org/cgi/opensearch.pl" type="application/opensearchdescription+xml" title="Open Food Facts">
    <script type="module" src="https://static.openfoodfacts.org/js/dist/off-webcomponents.bundled.js"></script>
	
    <style media="all">
        .show-when-no-access-to-producers-platform {display:none}
.show-when-logged-in {display:none}

		
		.badge-container{
			margin: 0 auto;
		}

		.badge-container img{
			margin: 5px;
		}
		@media only screen and (max-width: 537px ) and (min-width: 280px) {
			.badge-container{
				width: 280px;
			}
		}
		@media only screen and (max-width: 279px ){
			.badge-container{
				width: 130px;
			}
		}
    </style>
</head>
<body class="products_page">

	<!-- Matomo -->
<script>
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.openfoodfacts.org"]);
  _paq.push(["setDomains", ["*.openfoodfacts.org"]]);
  _paq.push(["setDoNotTrack", true]);
  _paq.push(["disableCookies"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//analytics.openfoodfacts.org/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '5']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//analytics.openfoodfacts.org/matomo.php?idsite=5&amp;rec=1" style="border:0;" alt="" /></p></noscript>
<!-- End Matomo Code -->



	
	<div class="skip"><a href="#content" tabindex="0">Skip to Content</a></div>
	

	<div id="barcode-scanner-modal" class="modal is_hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <span><h2>Scan a product<h2></span>
      <button class="modal-close-button">&times;</button>
    </div>
    <div>
      <barcode-scanner id="barcode-scanner"></barcode-scanner>
    </div>
    <div>
    </div>
    <div >
      <label for="barcode-modal-input">Or enter barcode manually</label>
      <div class="barcode-modal-group">
        <input type="text" id="barcode-modal-input" class="barcode-modal-input" inputmode="numeric" pattern="\d*" />
        <button class="barcode-modal-button button" id="barcode-modal-button" disabled>Scan</button>
      </div>
    </div>
  </div>
</div>

<script src="https://static.openfoodfacts.org/js/dist/barcode-scanner.js"></script>


	<div id="page">
		
		<div class="upper-nav contain-to-grid"  id="upNav">
			<nav class="top-bar " data-topbar role="navigation">
				
				<section class="top-bar-section">
					
					<!-- Left Nav Section -->
					<ul class="left">

						<li class="has-dropdown">
							<a id="menu_link">
								<span class="material-icons">
									menu
								</span>
							</a>
							<ul class="dropdown">				
								
									<li><a href="/discover">Discover</a></li>
									<li><a href="/contribute">Contribute</a></li>
									<li class="divider"></li>
									<li><label>Add products</label></li>
                <!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
									<li><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=pro_platform_install_the_app_to_add_products_en">Install the app to add products</a></li>
									<li><a href="/cgi/product.pl?type=search_or_add&action=display">Add a product</a></li>
								

								<li class="divider"></li>
								<li><label>Search and analyze products</label></li>

								<li>
									<a href="/cgi/search.pl">Advanced search</a>
								</li>
								<li>
									<a href="/cgi/search.pl?graph=1">Graphs and maps</a>
								</li>
								
							</ul>
						</li>
						
						<li>
							<ul class="country_language_selection">
								<li class="has-form has-dropdown" id="select_country_li">
									<select id="select_country" style="width:100%" data-placeholder="Country">
										<option></option>
									</select>
								</li>
								<li class="has-dropdown">
									<a href="https://world.openfoodfacts.org/">English</a>

									<ul class="dropdown">
										
									</ul>
								</li>
							</ul>
						</li>
					</ul>


					<!-- Right Nav Section -->
					
					<ul class="right">
						
							<li class="h-space-tiny has-form">
								<a href="/cgi/session.pl" class="round button secondary">
									<span class="material-icons material-symbols-button">account_circle</span>
									Sign in
								</a>
							</li>
						
					</ul>
				</section>
			</nav>
		</div>
		

		<div id="main_container" style="position:relative" class="block_latte">
		
		
		<div class="topbarsticky">
			<div class="contain-to-grid " id="offNav" >
				<nav class="top-bar" data-topbar role="navigation" >

					<ul class="title-area">
						<li class="name">
							<div style="position:relative;max-width:292px;">
								<a href="/">
								<img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-light.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;">
								
							</a>
							</div>
						</li>
					</ul>

					
					
					<section class="top-bar-section">
					
						<ul class="left small-4">
							<li class="search-li">
							
								<form action="/cgi/search.pl">
								<div class="row"><div class="small-12">
								<div class="row collapse postfix-round">
									<div class="columns">
									<input type="text" placeholder="Search for a product" name="search_terms" value="" style="background-color:white">
									<input name="search_simple" value="1" type="hidden">
									<input name="action" value="process" type="hidden">
									</div>
									<div class="columns postfix-button-wrapper">
									<button type="submit" title="Search" class="button postfix" style="line-height:normal"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
									</div>
									<div class="columns postfix-button-wrapper is_hidden">
  <button
    type="button"
    title="Scan a product"
    class="button barcode-scanner-button"
    id="barcode-scanner-button"
  >
    <svg style="width:24px;height:24px" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M2,6H4V18H2V6M5,6H6V18H5V6M7,6H10V18H7V6M11,6H12V18H11V6M14,6H16V18H14V6M17,6H20V18H17V6M21,6H22V18H21V6Z"/></svg>
  </button>

  <script src="https://static.openfoodfacts.org/js/dist/barcode-scanner-button.js"></script>
</div>

								</div>
								</div></div>
								</form>
							</li>
						</ul>
					<ul class="search_and_links">
						<li><a href="/discover" class="top-bar-links">Discover</a></li>
						<li><a href="/contribute" class="top-bar-links">Contribute</a></li>
						<li class="show-for-xlarge-up"><a href="https://world.pro.openfoodfacts.org/" class="top-bar-links">Producers</a></li>
						<li class="flex-grid getapp"><a href="/open-food-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=search_and_links_promo_en" class="buttonbar button" style="top:0;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <span class="bt-text">Get the app</span></a></li>
				<!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
          </ul>
					</section>
					
				</nav>
			</div>
		</div>

	
	
		<nav class="tab-bar hide">
			<div class="left-small">
				<a href="#idOfLeftMenu" role="button" aria-controls="idOfLeftMenu" aria-expanded="false" class="left-off-canvas-toggle button postfix anonymous">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
				</a>
			</div>
			<div class="middle tab-bar-section">
				<form action="/cgi/search.pl">
					<div class="row collapse">
						<div class="small-8 columns">
							<input type="text" placeholder="Search for a product" name="search_terms">
							<input name="search_simple" value="1" type="hidden">
							<input name="action" value="process" type="hidden">
						</div>
						<div class="small-2 columns">
							<button type="submit" class="button postfix"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
						</div>
						<div class="small-2 columns">
							<a href="/cgi/search.pl" title="Advanced search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg></a>
						</div>
					</div>
				</form>
			</div>
		</nav>
		

		<div id="content" class="off-canvas-wrap block_latte" data-offcanvas>
			<div class="inner-wrap">
			
				<a class="exit-off-canvas"></a>

				
				
				<!-- full width banner on mobile -->
				
				

				

				<div class="main block_light">
					<div id="main_column">

						
						
							
							
								<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

								

<section id="donation-banner-top" class="donation-banner row">
  <div class="donation-banner__left-aside">
    <div class="donation-banner__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div class="donation-banner__aside">
      <div class="donation-banner__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <div style="padding:1rem;">
        <p>Your donations fund the day-to-day operations of our non-profit association:</p>
        <ul>
          <li>
            keeping our database open & available to all,
            <ul>
              <li>technical infrastructure (website/mobile app) & a small permanent team</li>
            </ul>
          </li>
          <li>
            <p>remain independent of the food industry,</p>
          </li>
          <li>
            <p>engage a community of committed citizens,</p>
          </li>
          <li>
            <p>support the advancement of public health research.</p>
          </li>
        </ul>
      </div>
    </div>
    <div class="donation-banner__actions-section">
      <div class="donation-banner__actions-section__financial">
        <p>
          
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
          
        </p>
      </div>
      <div class="donation-banner__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
  <div class="donation-banner__close">
    <button id="hide-donate-banner" class="material-icons modest" onclick="DonationButton();" onkeypress="DonationButton();">close</button>
  </div>
</section>

<script>
  let d = new Date();
  let bannerID = document.getElementById('donation-banner-top');
  let getDomain = window.location.origin.split('.');

  function setBannerCookie(bcname, bcval, bcexdays) {
    d.setTime(d.getTime() + (bcexdays*60*60*24*1000));
    let expires = 'expires=' + d.toUTCString();
    // Apply cookie for every domain contains open...facts
    let domain = 'domain=.' + getDomain.slice(1).join('.');
    document.cookie = bcname + '=' + bcval + ';' + expires + ';' + domain + ';SameSite=None;Secure;path=/';
  }

  function getBannerCookie(bcname) {
    const name = bcname + '=';
    const decodedCookies = decodeURIComponent(document.cookie);
    const cookies = decodedCookies.split(';');
    for (const cookie of cookies) {
      let c = cookie;
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
    }

    return '';
  }

  function DonationButton() {
    setBannerCookie('off_donation_banner_2024_a', 1, 180);
    bannerID.style.display = 'none';
  }

  if (getBannerCookie('off_donation_banner_2024_a') !== '') {
    bannerID.style.display = 'none';
  } else {
    bannerID.style.display = 'flex';
  }
</script>


							
						
						
            			
						
							
								<!-- some lists of products for facets (e.g. brands) have microformats data -->
								<div itemscope itemtype="https://schema.org/Thing">
									<div class="row">
										<div class="small-12 column v-space-short">
											<h1 itemprop="name">2020-04</h1>
										</div>
									</div>
								  <!-- start templates/web/pages/tag/tag.tt.html -->
<div class="tag">
    <div class="row">
        <div class="large-6 column">

            <div class="tag_navigation">
                
                    <a href="/facets/last-edit-dates">Last edit date</a>:
                    <a href="/facets/last-edit-dates/2020-04">2020-04</a>
                    
                
            </div>

            

                

                

                

                

                

                

            

            

            
        </div>

        
            

            <div class="large-6 column">                
            <!-- injecting facet-knowledge-panel -->
            <div id="facet-knowledge-panel" style="margin-left: 70px; z-index: 1;">
                <h2 id="facet_panels_title"></h2>
                <div id="facet_panels_content"></div>
            </div>
            <!-- Fetching facet knowledge panel -->                
            <script>
                    let facet_kp = "https://facets-kp.openfoodfacts.org/render-to-html";
                    let params = "?facet_tag=last_edit_dates&value_tag=";
                    if ("") {
                        params += "&sec_facet_tag=&sec_value_tag="
                    }

                    // Adding language code to get translated data
                    params += "&lang_code=en&country=world";

                    fetch(facet_kp + params)
                        .then((response) => {
                            if (response.ok) {
                                return response.text();
                            }
                            else {
                                throw new Error("Network Response Error while fetching facet kp");

                            }
                        })
                        .then(data => {
                            let title = document.getElementById("facet_panels_title");
                            title.innerHTML = "Facet knowledge panel";
                            let knowledgepanel = document.getElementById("facet_panels_content");
                            knowledgepanel.innerHTML = data;
                            // Keeping Hungergames and Lastedits panel open by default
                            jQuery("#HungerGames").attr("open", true);
                            jQuery("#LastEdits").attr("open", true);

                        })
                </script>
            </div>
            
        
    </div>
</div>

<!-- end templates/web/pages/tag/tag.tt.html -->
<!-- start templates/web/common/includes/list_of_products.tt.html --> 

<div class="row">
  <div class="small-12 columns"> 
    
    
      
      
      
      <!-- display a permalink if the url is for a script that may have POST parameters -->
      
    
    
  </div>
</div>

 

<div class="block short block_ristreto">
  <div class="row">
    <div class="small-12 columns filterProducts">
      <div>
        <span class="filterProducts__results">
          <span class="material-icons" aria-hidden="true">search</span>
          203,412 products
        </span>
      </div>
      <div class="filterProducts__buttons">
        <div>
          <button href="#" data-dropdown="drop_sort" aria-controls="drop_sort" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">swap_vert</span>
            
          </button>
          <ul id="drop_sort" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/last-edit-dates/2020-04?sort_by=popularity" onclick="$.cookie('last_sort_by', 'popularity', { expires: 180, path: '/' });">Most scanned products</a>
            </li>
        
            <li>
              <a href="/facets/last-edit-dates/2020-04?sort_by=nutriscore_score" onclick="$.cookie('last_sort_by', 'nutriscore_score', { expires: 180, path: '/' });">Products with the best Nutri-Score</a>
            </li>
        
            <li>
              <a href="/facets/last-edit-dates/2020-04?sort_by=environmental_score_score" onclick="$.cookie('last_sort_by', 'environmental_score_score', { expires: 180, path: '/' });">Products with the best Green-Score</a>
            </li>
        
            <li>
              <a href="/facets/last-edit-dates/2020-04?sort_by=created_t" onclick="$.cookie('last_sort_by', 'created_t', { expires: 180, path: '/' });">Recently added products</a>
            </li>
        
            <li>
              <a href="/facets/last-edit-dates/2020-04?sort_by=last_modified_t" onclick="$.cookie('last_sort_by', 'last_modified_t', { expires: 180, path: '/' });">Recently modified products</a>
            </li>
        
          </ul>
        </div>
        
        
        <div>
          <button href="#" data-dropdown="drop1" aria-controls="drop1" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">sort</span>
            Explore products by...
          </button>
          <ul id="drop1" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/countries" rel="nofollow">Countries</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/nutrition-grades" rel="nofollow">Nutrition grades</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/nova-groups" rel="nofollow">NOVA groups</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/environmental-score" rel="nofollow">Green-Score</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/brands" rel="nofollow">Brands</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/categories" rel="nofollow">Categories</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/labels" rel="nofollow">Labels</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/packaging" rel="nofollow">Packaging</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/origins" rel="nofollow">Origins of ingredients</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/manufacturing-places" rel="nofollow">Manufacturing or processing places</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/packager-codes" rel="nofollow">Traceability codes</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/ingredients" rel="nofollow">Ingredients</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/additives" rel="nofollow">Additives</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/vitamins" rel="nofollow">Added vitamins</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/minerals" rel="nofollow">Added minerals</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/amino-acids" rel="nofollow">Added amino acids</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/nucleotides" rel="nofollow">Added nucleotides</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/other-nutritional-substances" rel="nofollow">Other nutritional substances added</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/allergens" rel="nofollow">Allergens</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/traces" rel="nofollow">Traces</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/misc" rel="nofollow">Miscellaneous</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/languages" rel="nofollow">Languages</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/contributors" rel="nofollow">Contributors</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/states" rel="nofollow">States</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/data-sources" rel="nofollow">Data sources</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/entry-dates" rel="nofollow">Entry dates</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/last-edit-dates" rel="nofollow">Last edit dates</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/last-check-dates" rel="nofollow">Last check dates</a>
            </li>
          
            <li>
              <a href="/facets/last-edit-dates/2020-04/teams" rel="nofollow">Teams</a>
            </li>
          
          </ul>
        </div>
        
        
      </div>
    </div>
  </div>
</div>


<div class="row">
	<div class="small-12 columns">
    <div id="preferences_selected" class="small-12 flex-grid v-space-short v-align-center direction-row full-width v-align-between"></div>
    <div id="preferences_selection_form" style="display:none"></div>
  </div>
</div>

	 
<div class="row">
<div class="large-12 columns">
    
    <div id="search_results" style="clear:left;">
        <ul class="products">
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
		</ul>
  </div>
      
    
	<ul id="pages" class="pagination"><li class="unavailable">Pages:</li><li class="current"><a href="">1</a></li><li><a href="/facets/last-edit-dates/2020-04/2">2</a></li><li><a href="/facets/last-edit-dates/2020-04/3">3</a></li><li><a href="/facets/last-edit-dates/2020-04/4">4</a></li><li class="unavailable">&hellip;</li><li><a href="/facets/last-edit-dates/2020-04/4067">4067</a></li><li><a href="/facets/last-edit-dates/2020-04/4068">4068</a></li><li><a href="/facets/last-edit-dates/2020-04/4069">4069</a></li><li><a href="/facets/last-edit-dates/2020-04/2" rel="next$nofollow">Next</a></li><li class="unavailable">(50 products per page)</li></ul>

  </div>
</div>


<!-- end templates/web/common/includes/list_of_products.tt.html -->

								</div>
							
						
					</div>
				</div>
			</div>
		</div>
		</div>

		
		<footer>
			<div class="block_light bg-white" id="install_the_app_block">
				<div class="row">
					<div class="small-12 flex-grid v-space-short v-align-center direction-row h-space-tiny">
						<div class="cell small-100 medium-100 large-50 flex-grid v-align-center direction-row">
							<img class="cell small-50 v-align-center" src="/images/illustrations/app-icon-in-the-clouds.svg" alt="The Open Food Facts logo in the cloud" style="height:120px">
							<div class="cell small-50 v-align-center" id="footer_scan" style="display:block">
								<div id="footer_install_the_app">
									Install the app!
								</div>
								Scan your <span id="everyday">everyday</span> <span id="foods">foods</span>
							</div>
						</div>
						<div class="row">
							<div class="small-12 medium-12 large-12 v-space-normal column badge-container">
								<!-- android_app_link - https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner&hl=en -->
								<a  href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner&utm_source=off&utf_medium=web&utm_campaign=install_the_app_android_footer_en"><img src="/images/misc/playstore/img/latest/GetItOnGooglePlay_Badge_Web_color_English.svg" alt="Get It On Google Play" loading="lazy" height="40" width="120"></a>
								
								<a href="https://f-droid.org/packages/openfoodfacts.github.scrachx.openfood"><img src="/images/misc/f-droid/svg/get-it-on-en.svg" alt="Available on F-Droid" loading="lazy" height="40" width="120"></a>

								<!-- android_apk_app_link - https://world.openfoodfacts.org/images/apps/off.apk -->
								<a href="https://github.com/openfoodfacts/smooth-app/releases/latest?utm_source=off&utf_medium=web&utm_campaign=install_the_app_apk_footer_en"><img src="/images/misc/app-landing-page/download-apk/download-apk_en.svg" alt="Android APK" loading="lazy" height="40" width="120"></a>
								
								<!-- msgid "https://apps.apple.com/app/open-beauty-facts/id1122926380" -->
								<a href="https://apps.apple.com/app/open-food-facts/id588797948?utm_source=off&utf_medium=web&utm_campaign=install_the_app_ios_footer_en"><img src="/images/misc/appstore/black/appstore_US.svg" alt="Download on the App Store"  loading="lazy" height="40" width="120"></a>
							</div>
						</div>
					</div>
				</div>
			</div>

			
      			<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

				

<section class="donation-banner-footer row">
  <div class="donation-banner-footer__left-aside">
    <div class="donation-banner-footer__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div>
      <div class="donation-banner-footer__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner-footer__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <p>Your donations fund the day-to-day operations of our non-profit association:</p>
      <ul>
        <li>
          keeping our database open & available to all,
          <ul>
            <li>technical infrastructure (website/mobile app) & a small permanent team</li>
          </ul>
        </li>
        <li>
          <p>remain independent of the food industry,</p>
        </li>
        <li>
          <p>engage a community of committed citizens,</p>
        </li>
        <li>
          <p>support the advancement of public health research.</p>
        </li>
      </ul>
    </div>
    <div class="donation-banner-footer__actions-section">
      <div class="donation-banner-footer__actions-section__financial">
        <p>
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
        </p>
      </div>
      <div class="donation-banner-footer__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
</section>


			
      		
			<div class="block_light block_cappucino" id="contribute_and_discover_links_block">
				<div class="row">
					<div class="small-12 large-6 columns v-space-normal block_off">
						<h3 class="title-5 text-medium">Join the community</h3>
						<p>Discover our <a href="/code-of-conduct">Code of conduct</a></p>
						<p>Join us on <a href="https://slack.openfoodfacts.org">Slack</a></p>
						<p><a href="https://forum.openfoodfacts.org/">Forum</a></p>
						<p id="footer_social_icons">Follow us: 
							<a href="https://x.com/OpenFoodFacts"><img src="/images/icons/dist/x.svg" class="footer_social_icon" alt="x"></a>
							<a href="https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web"><img src="/images/icons/dist/facebook.svg" class="footer_social_icon" alt="Facebook"></a>
							<a href="https://www.instagram.com/open.food.facts/"><img src="/images/icons/dist/instagram.svg" class="footer_social_icon" alt="Instagram"></a>
							
						</p>
						<p><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></p>
					</div>
					<div class="small-12 large-6 columns project v-space-normal">
						<h3 class="title-5 text-medium">Discover the project</h3>
						<ul class="inline-list tags_links v-space-tiny h-space-tiny" >
							<li><a class="button small white-button radius" href="/who-we-are">Who we are</a></li>
							<li><a class="button small white-button radius" href="https://world.openfoodfacts.org/open-food-facts-vision-mission-values-and-programs">Vision, Mission, Values and Programs</a></li>
							<li><a class="button small white-button radius" href="https://support.openfoodfacts.org/help/en-gb">Frequently asked questions</a></li>
							<li><a class="button small white-button radius" href="https://blog.openfoodfacts.org/en/">Open Food Facts blog</a></li>
							<li><a class="button small white-button radius" href="/press">Press</a></li>
							<li><a class="button small white-button radius" href="https://wiki.openfoodfacts.org">Open Food Facts wiki (en)</a></li>
							<li><a class="button small white-button radius" href="/cgi/top_translators.pl">Translators</a></li>
							<li><a class="button small white-button radius" href="/partners">Partners</a></li>
							<li><a class="button small white-button radius" href="https://world.openbeautyfacts.org">Open Beauty Facts - Cosmetics</a></li>
							<li><a class="button small white-button radius" href="https://world.pro.openfoodfacts.org/">Open Food Facts for Producers</a></li>
						</ul>
					</div>
				</div>
			</div>

			<div class="block_off block_dark block_ristreto" id="footer_block">

				<div id="footer_block_image_banner_outside">
					<div id="footer_block_image_banner_outside2">

						<div class="row">

							<div class="small-12 text-center v-space-short h-space-large">
								<a href="/" style="font-size:1rem;"><img id="logo" src="https://static.openfoodfacts.org/images/logos/off-logo-horizontal-mono-white.svg" alt="Open Food Facts" style="margin:8px;height:48px;width:auto;"></a>

								<p>A collaborative, free and open database of food products from around the world.</p>
								
								<ul class="inline-list text-center text-small">
									<li><a href="/legal">Legal</a></li>
									<li><a href="/privacy">Privacy</a></li>
									<li><a href="/terms-of-use">Terms of use</a></li>
									<li><a href="/data">Data, API and SDKs</a></li>
									<li><a href="https://world.openfoodfacts.org/donate-to-open-food-facts">Donate to Open Food Facts</a></li>
									<li><a href="https://world.pro.openfoodfacts.org/">Producers</a></li>
									<li><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></li>
								</ul>
							</div>

						</div>

					</div>
				</div>
			</div>
		</footer>
		

	</div>

<script src="https://static.openfoodfacts.org/js/dist/modernizr.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery-ui.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/hc-sticky.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/display.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/stikelem.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/scrollNav.js"></script>
  

<script>
$(function() {
display_user_product_preferences("#preferences_selected", "#preferences_selection_form", function () {
	rank_and_display_products("#search_results", products, contributor_prefs);
});
rank_and_display_products("#search_results", products, contributor_prefs);


});
</script>



<script src="https://static.openfoodfacts.org/js/dist/foundation.js" data-base-layout="true"></script>
<script src="https://static.openfoodfacts.org/js/dist/jquery.cookie.js"></script>
<script src="https://static.openfoodfacts.org/js/dist/select2.min.js"></script>
<script type="text/javascript">
var page_type = "products";
var default_preferences = {"ecoscore":"important","nova":"important","nutriscore":"very_important"};
var preferences_text = "Classify the 50 products below according to your preferences";
var contributor_prefs = {"display_barcode":null,"edit_link":null};
var products = [
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5060211770029",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/506/021/177/0029/front_en.4.200.jpg",
      "product_display_name":"manifik",
      "url":"https://world.openfoodfacts.org/product/5060211770029/manifik"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"24 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":16,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"16 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3073781014129",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/307/378/101/4129/front_es.4.200.jpg",
      "product_display_name":"Babybel – bel",
      "url":"https://world.openfoodfacts.org/product/3073781014129/babybel-bel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"1.02 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":44,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"1.7 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":88.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":94.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"6 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8480000822277",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/848/000/082/2277/front_fr.4.200.jpg",
      "product_display_name":"Pan rallado con ajo y perejil – Hacendado – 500 g",
      "url":"https://world.openfoodfacts.org/product/8480000822277/pan-rallado-con-ajo-y-perejil-hacendado"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":27.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.8 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":16,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"35 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"24 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4056489157076",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/405/648/915/7076/front_es.3.200.jpg",
      "product_display_name":"Queso Havarti – Milbona",
      "url":"https://world.openfoodfacts.org/product/4056489157076/queso-havarti-milbona"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":35.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.575 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":66.25,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":27.0588235294118,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"3 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":54.2857142857143,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"35 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/4-additives.svg",
                  "id":"additives",
                  "match":20,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"4 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":50,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0044000050153",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/004/400/005/0153/front_en.4.200.jpg",
      "product_display_name":"Breakfast biscuits, toasted coconut – Belvita",
      "url":"https://world.openfoodfacts.org/product/0044000050153/breakfast-biscuits-toasted-coconut-belvita"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"12447543",
      "product_display_name":"Code-Barres non valide. Veuillez rescanner –",
      "url":"https://world.openfoodfacts.org/product/12447543/code-barres-non-valide-veuillez-rescanner"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":53.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.12 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":92,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"7.5 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":64.1176470588235,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"4.5 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":28.5714285714286,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":67,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5900197012723",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/590/019/701/2723/front_pl.11.200.jpg",
      "product_display_name":"Bakoma jogurt naturalny typ grecki – 400g",
      "url":"https://world.openfoodfacts.org/product/5900197012723/bakoma-jogurt-naturalny-typ-grecki"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":18.2727272727273,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.55 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":19.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"71.4 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"5.4 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":18.4,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"17 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/6-additives.svg",
                  "id":"additives",
                  "match":0,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"6 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.8413333333333,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3265478893005",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/326/547/889/3005/front_fr.24.200.jpg",
      "product_display_name":"Mayonnaise Lessieur – Lesieur – 710 g",
      "url":"https://world.openfoodfacts.org/product/3265478893005/mayonnaise-lessieur-lesieur"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":49.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.938 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":48.125,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"9.38 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":57.4823529411765,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"15 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":40,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0044000000554",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/004/400/000/0554/front_en.3.200.jpg",
      "product_display_name":"Nabisco premium crackers unsalted1x16 oz – Premium Saltines",
      "url":"https://world.openfoodfacts.org/product/0044000000554/nabisco-premium-crackers-unsalted1x16-oz-premium-saltines"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":47.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"2.08 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":12.2333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegan.svg",
                  "id":"vegan",
                  "match":50,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:maybe-vegan",
                  "status":"known",
                  "title":"Maybe vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0041565188345",
      "product_display_name":"Picante sauce",
      "url":"https://world.openfoodfacts.org/product/0041565188345/picante-sauce"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.76 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":57,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"21.4 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":18.57,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1.79 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":75.0285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":73,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0099482435349",
      "product_display_name":"365 everyday value, fat & sodium popcorn",
      "url":"https://world.openfoodfacts.org/product/0099482435349/365-everyday-value-fat-sodium-popcorn"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":67.3333333333333,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.01 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"1.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":92.6666666666667,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0.1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":98.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8003740120054",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/800/374/012/0054/front_fr.3.200.jpg",
      "product_display_name":"Spaghetti Italie 1881 500G –  – 500 g",
      "url":"https://world.openfoodfacts.org/product/8003740120054/spaghetti-italie-1881-500g"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":31.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.795 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":55.25,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"4.55 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":74.5294117647059,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0014100071112",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/001/410/007/1112/front_en.4.200.jpg",
      "product_display_name":"Raisin cinnamon bread, raisin cinnamon – Pepperidge Farm",
      "url":"https://world.openfoodfacts.org/product/0014100071112/raisin-cinnamon-bread-raisin-cinnamon-pepperidge-farm"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5000169011539",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/500/016/901/1539/front_en.3.200.jpg",
      "product_display_name":"Self raising white flour – Waitrose",
      "url":"https://world.openfoodfacts.org/product/5000169011539/self-raising-white-flour-waitrose"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":45.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.983 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":45.875,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"28.6 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":11.43,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.57 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":44.5142857142857,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 8 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0078742237022",
      "product_display_name":"Thin & crispy cantina style tortilla chips",
      "url":"https://world.openfoodfacts.org/product/0078742237022/thin-crispy-cantina-style-tortilla-chips"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"en:celery in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-celery.svg",
                  "id":"allergens_no_celery",
                  "match":0,
                  "name":"Celery",
                  "status":"known",
                  "title":"Contains: Celery"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"9 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Moderate risk of deforestation",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-c.svg",
                  "id":"forest_footprint",
                  "match":52.3405758699876,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Medium forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0051000248916",
      "product_display_name":"Swanson broth chicken",
      "url":"https://world.openfoodfacts.org/product/0051000248916/swanson-broth-chicken"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":35.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0031200004130",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/003/120/000/4130/front_en.3.200.jpg",
      "product_display_name":"Dried cranberries – Ocean Spray",
      "url":"https://world.openfoodfacts.org/product/0031200004130/dried-cranberries-ocean-spray"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":25.2222222222222,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.61 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":18.5666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"32.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":7.86,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.57 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":44.5142857142857,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 25 ingredients (4 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0829515321291",
      "product_display_name":"Sensible portions, veggie chips, sour cream & onion",
      "url":"https://world.openfoodfacts.org/product/0829515321291/sensible-portions-veggie-chips-sour-cream-onion"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"en:sesame-seeds in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":20,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"May contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegan.svg",
                  "id":"vegan",
                  "match":50,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:maybe-vegan",
                  "status":"known",
                  "title":"Maybe vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":50,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:may-contain-palm-oil",
                  "status":"known",
                  "title":"May contain palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3228850000026",
      "product_display_name":"",
      "url":"https://world.openfoodfacts.org/product/3228850000026"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":51.5555555555556,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"0.13 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":91.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"8 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":62.3529411764706,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"5.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":18.8,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 6 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":67,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8435257041728",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/843/525/704/1728/front_es.5.200.jpg",
      "product_display_name":"Yogur griego – Auchan",
      "url":"https://world.openfoodfacts.org/product/8435257041728/yogur-griego-auchan"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":100,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8480012013892",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/848/001/201/3892/front_es.24.200.jpg",
      "product_display_name":"Agua mineral natural – eliges",
      "url":"https://world.openfoodfacts.org/product/8480012013892/agua-mineral-natural-eliges"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"00102643",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/000/010/2643/front_fr.4.200.jpg",
      "product_display_name":"Ginger preserve – By Sainsbury's",
      "url":"https://world.openfoodfacts.org/product/00102643/ginger-preserve-by-sainsbury-s"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6111249090968",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/611/124/909/0968/front_fr.3.200.jpg",
      "product_display_name":"Amande",
      "url":"https://world.openfoodfacts.org/product/6111249090968/amande"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8413279004037",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/841/327/900/4037/front_fr.3.200.jpg",
      "product_display_name":"Miel",
      "url":"https://world.openfoodfacts.org/product/8413279004037/miel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.7 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":60,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":86.6666666666667,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"14 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0016000441699",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/001/600/044/1699/front_fr.4.200.jpg",
      "product_display_name":"Nat vly prtn gran oats n hny – Nature Valley",
      "url":"https://world.openfoodfacts.org/product/0016000441699/nat-vly-prtn-gran-oats-n-hny-nature-valley"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":55.7777777777778,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.92 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":14.4333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"11 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegan.svg",
                  "id":"vegan",
                  "match":50,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:maybe-vegan",
                  "status":"known",
                  "title":"Maybe vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0041565141166",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/004/156/514/1166/front_en.3.200.jpg",
      "product_display_name":"Pace dips medium – 16 oz",
      "url":"https://world.openfoodfacts.org/product/0041565141166/pace-dips-medium"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.138 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":90.8333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"3.96 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":76.6117647058824,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"2.64 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":60.4571428571429,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 3 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":67,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0088194340607",
      "product_display_name":"Whole milk yogurt – Brown Cow",
      "url":"https://world.openfoodfacts.org/product/0088194340607/whole-milk-yogurt-brown-cow"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":100,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"93.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":0,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"13.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-2.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed culinary ingredients"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":27,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0099482454715",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/009/948/245/4715/front_en.5.200.jpg",
      "product_display_name":"365 everyday value, 100% mediterranean blend extra virgin olive oil",
      "url":"https://world.openfoodfacts.org/product/0099482454715/365-everyday-value-100-mediterranean-blend-extra-virgin-olive-oil"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":9.63636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"0.14 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":90.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"34 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":6,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"18 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":0,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Contains: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"en:nuts in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":0,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Contains: Nuts"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"13 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/1-additives.svg",
                  "id":"additives",
                  "match":80,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"1 additive"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":19,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":100,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5412956213772",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/541/295/621/3772/front_fr.4.200.jpg",
      "product_display_name":"Chocolat au lait noisettes – Cachet – 100 g",
      "url":"https://world.openfoodfacts.org/product/5412956213772/chocolat-au-lait-noisettes-cachet"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":23.1111111111111,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.52 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":19.7666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"35.7 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":4.29,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"5.36 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":18.56,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"3 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":68,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0028400047937",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/002/840/004/7937/front_en.5.200.jpg",
      "product_display_name":"Fritos Original Corn Chips 2.0 Ounce Plastic Bag – 56.7 g",
      "url":"https://world.openfoodfacts.org/product/0028400047937/fritos-original-corn-chips-2-0-ounce-plastic-bag"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":13.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"18.3 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":26,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"2 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":71.4285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-b.svg",
                  "id":"ecoscore",
                  "match":74,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score B"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8423102210108",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/842/310/221/0108/front_es.4.200.jpg",
      "product_display_name":"Rosquilletas horno – Anitin",
      "url":"https://world.openfoodfacts.org/product/8423102210108/rosquilletas-horno-anitin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":62.1875,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.0075 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":99,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"1 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-1.svg",
                  "id":"nova",
                  "match":100,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Unprocessed or minimally processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description_short":"Not yet applicable for the category: Waters",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-not-applicable.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not applicable"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0041508803052",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/004/150/880/3052/front_fr.3.200.jpg",
      "product_display_name":"Sparkling natural mineral water – San Pellegrino",
      "url":"https://world.openfoodfacts.org/product/0041508803052/sparkling-natural-mineral-water-san-pellegrino"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"1 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":45,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"12 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-medium.svg",
                  "id":"low_fat",
                  "match":48.2352941176471,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in moderate quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"1.4 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":81.3333333333333,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":40,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3263670390117",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/326/367/039/0117/front_fr.3.200.jpg",
      "product_display_name":"Rillettes de thon – Connétable",
      "url":"https://world.openfoodfacts.org/product/3263670390117/rillettes-de-thon-connetable"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":73.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.145 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":90.3333333333333,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"10 ingredients (1 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0078742147116",
      "product_display_name":"Chicken broth",
      "url":"https://world.openfoodfacts.org/product/0078742147116/chicken-broth"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3517360003277",
      "product_display_name":"",
      "url":"https://world.openfoodfacts.org/product/3517360003277"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very good nutritional quality",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg",
                  "id":"nutriscore",
                  "match":81,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score A"
               },
               {
                  "description_short":"0.08 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-low.svg",
                  "id":"low_salt",
                  "match":94.6666666666667,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in moderate quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 1 ingredients (1 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very low environmental impact",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-a.svg",
                  "id":"ecoscore",
                  "match":77,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score A"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0070796300035",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/007/079/630/0035/front_en.3.200.jpg",
      "product_display_name":"Crushed tomatoes – Cento – 795 g",
      "url":"https://world.openfoodfacts.org/product/0070796300035/crushed-tomatoes-cento"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":33.6666666666667,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"1.07 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":41.375,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"32.1 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":7.86,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"14.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":35,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0077901004017",
      "product_display_name":"Soft-ripened cheese – President",
      "url":"https://world.openfoodfacts.org/product/0077901004017/soft-ripened-cheese-president"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 19 ingredients (15 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3250390137801",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/325/039/013/7801/front_fr.4.200.jpg",
      "product_display_name":"Suiss'Fruits – Pâturages",
      "url":"https://world.openfoodfacts.org/product/3250390137801/suiss-fruits-paturages"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg",
                  "id":"nutriscore",
                  "match":9.63636363636364,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score E"
               },
               {
                  "description_short":"1.23 g / 100 g",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":33.5,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"27 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":13,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in high quantity"
               },
               {
                  "description_short":"13 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Moderate environmental impact",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-c.svg",
                  "id":"ecoscore",
                  "match":46,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score C"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3700566453179",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/370/056/645/3179/front_fr.4.200.jpg",
      "product_display_name":"Marbres – Céliane",
      "url":"https://world.openfoodfacts.org/product/3700566453179/marbres-celiane"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 11 ingredients (2 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0027000523865",
      "product_display_name":"ORVILLE REDENBACHERS Butter Popcorn",
      "url":"https://world.openfoodfacts.org/product/0027000523865/orville-redenbachers-butter-popcorn"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":29.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"2.33 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":8.9,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"23.3 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":16.67,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"3.33 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-medium.svg",
                  "id":"low_saturated_fat",
                  "match":48.6285714285714,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in moderate quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"en:eggs in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":0,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Contains: Eggs"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":0,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Contains: Soybeans"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"en:mustard in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":0,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Contains: Mustard"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"22 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/2-additives.svg",
                  "id":"additives",
                  "match":60,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"2 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.9927433333333,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0011110887948",
      "product_display_name":"Dressing",
      "url":"https://world.openfoodfacts.org/product/0011110887948/dressing"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Average nutritional quality",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg",
                  "id":"nutriscore",
                  "match":49.4444444444444,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score C"
               },
               {
                  "description_short":"1.88 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-high.svg",
                  "id":"low_salt",
                  "match":15,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in high quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"8 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0858996005000",
      "product_display_name":"Italian dill chips, italian dill",
      "url":"https://world.openfoodfacts.org/product/0858996005000/italian-dill-chips-italian-dill"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Good nutritional quality",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg",
                  "id":"nutriscore",
                  "match":61,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score B"
               },
               {
                  "description_short":"0.5 g / 100 g",
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":70,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-low.svg",
                  "id":"low_fat",
                  "match":100,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in low quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"0 g / 100 g",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-low.svg",
                  "id":"low_saturated_fat",
                  "match":100,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in low quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-milk.svg",
                  "id":"allergens_no_milk",
                  "match":100,
                  "name":"Milk",
                  "status":"known",
                  "title":"Does not contain: Milk"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"2 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Promotes ecological sustainability and biodiversity.",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic.svg",
                  "id":"labels_organic",
                  "match":100,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0079893298061",
      "product_display_name":"Organic rice cakes",
      "url":"https://world.openfoodfacts.org/product/0079893298061/organic-rice-cakes"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.8 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":55,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"35 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":5,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"23 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":100,
                  "name":"Gluten",
                  "status":"known",
                  "title":"Does not contain: Gluten"
               },
               {
                  "debug":"en:milk in allergens",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-milk.svg",
                  "id":"allergens_no_milk",
                  "match":0,
                  "name":"Milk",
                  "status":"known",
                  "title":"Contains: Milk"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":100,
                  "name":"Eggs",
                  "status":"known",
                  "title":"Does not contain: Eggs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-nuts.svg",
                  "id":"allergens_no_nuts",
                  "match":100,
                  "name":"Nuts",
                  "status":"known",
                  "title":"Does not contain: Nuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-peanuts.svg",
                  "id":"allergens_no_peanuts",
                  "match":100,
                  "name":"Peanuts",
                  "status":"known",
                  "title":"Does not contain: Peanuts"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sesame-seeds.svg",
                  "id":"allergens_no_sesame_seeds",
                  "match":100,
                  "name":"Sesame seeds",
                  "status":"known",
                  "title":"Does not contain: Sesame seeds"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":100,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"Does not contain: Soybeans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-celery.svg",
                  "id":"allergens_no_celery",
                  "match":100,
                  "name":"Celery",
                  "status":"known",
                  "title":"Does not contain: Celery"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-mustard.svg",
                  "id":"allergens_no_mustard",
                  "match":100,
                  "name":"Mustard",
                  "status":"known",
                  "title":"Does not contain: Mustard"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-lupin.svg",
                  "id":"allergens_no_lupin",
                  "match":100,
                  "name":"Lupin",
                  "status":"known",
                  "title":"Does not contain: Lupin"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-fish.svg",
                  "id":"allergens_no_fish",
                  "match":100,
                  "name":"Fish",
                  "status":"known",
                  "title":"Does not contain: Fish"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-crustaceans.svg",
                  "id":"allergens_no_crustaceans",
                  "match":100,
                  "name":"Crustaceans",
                  "status":"known",
                  "title":"Does not contain: Crustaceans"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-molluscs.svg",
                  "id":"allergens_no_molluscs",
                  "match":100,
                  "name":"Molluscs",
                  "status":"known",
                  "title":"Does not contain: Molluscs"
               },
               {
                  "debug":"4 ingredients (0 unknown)",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/no-sulphur-dioxide-and-sulphites.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "match":100,
                  "name":"Sulphur dioxide and sulphites",
                  "status":"known",
                  "title":"Does not contain: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/maybe-vegetarian.svg",
                  "id":"vegetarian",
                  "match":50,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:maybe-vegetarian",
                  "status":"known",
                  "title":"Maybe vegetarian"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"b",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-3.svg",
                  "id":"nova",
                  "match":75,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Processed foods"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/0-additives.svg",
                  "id":"additives",
                  "match":100,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"Without additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"High environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-d.svg",
                  "id":"ecoscore",
                  "match":37,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score D"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3257980890511",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/325/798/089/0511/front_fr.10.200.jpg",
      "product_display_name":"Comté Au Lait Cru Extra Bande, 5 Mois – Cora – 350 g",
      "url":"https://world.openfoodfacts.org/product/3257980890511/comte-au-lait-cru-extra-bande-5-mois-cora"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"en:gluten in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-gluten.svg",
                  "id":"allergens_no_gluten",
                  "match":20,
                  "name":"Gluten",
                  "status":"known",
                  "title":"May contain: Gluten"
               },
               {
                  "debug":"en:milk in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-milk.svg",
                  "id":"allergens_no_milk",
                  "match":20,
                  "name":"Milk",
                  "status":"known",
                  "title":"May contain: Milk"
               },
               {
                  "debug":"en:eggs in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-eggs.svg",
                  "id":"allergens_no_eggs",
                  "match":20,
                  "name":"Eggs",
                  "status":"known",
                  "title":"May contain: Eggs"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"en:soybeans in traces",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/may-contain-soybeans.svg",
                  "id":"allergens_no_soybeans",
                  "match":20,
                  "name":"Soybeans",
                  "status":"known",
                  "title":"May contain: Soybeans"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"too many unknown ingredients: 22 ingredients (3 unknown)",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients_analysis_details",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegan.svg",
                  "id":"vegan",
                  "match":0,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:non-vegan",
                  "status":"known",
                  "title":"Non-vegan"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/non-vegetarian.svg",
                  "id":"vegetarian",
                  "match":0,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:non-vegetarian",
                  "status":"known",
                  "title":"Non-vegetarian"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-4.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"known",
                  "title":"Ultra-processed foods"
               },
               {
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/3-additives.svg",
                  "id":"additives",
                  "match":40,
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"known",
                  "title":"3 additives"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Almost no risk of deforestation",
                  "grade":"a",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-a.svg",
                  "id":"forest_footprint",
                  "match":99.8513025967144,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Very small forest footprint"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8585002483072",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/858/500/248/3072/front_bg.9.200.jpg",
      "product_display_name":"Bouillon de poulet – Maggi – 80g",
      "url":"https://world.openfoodfacts.org/product/8585002483072/bouillon-de-poulet-maggi"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Lower nutritional quality",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg",
                  "id":"nutriscore",
                  "match":37.8888888888889,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"known",
                  "title":"Nutri-Score D"
               },
               {
                  "description_short":"0.9 g / 100 g",
                  "grade":"c",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-medium.svg",
                  "id":"low_salt",
                  "match":50,
                  "name":"Salt",
                  "panel_id":"nutrient_level_salt",
                  "status":"known",
                  "title":"Salt in moderate quantity"
               },
               {
                  "description_short":"29 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-high.svg",
                  "id":"low_fat",
                  "match":11,
                  "name":"Fat",
                  "panel_id":"nutrient_level_fat",
                  "status":"known",
                  "title":"Fat in high quantity"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-high.svg",
                  "id":"low_sugars",
                  "match":0,
                  "name":"Sugars",
                  "panel_id":"nutrient_level_sugars",
                  "status":"known",
                  "title":"Sugars in low quantity"
               },
               {
                  "description_short":"19.5 g / 100 g",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-high.svg",
                  "id":"low_saturated_fat",
                  "match":0,
                  "name":"Saturated fat",
                  "panel_id":"nutrient_level_saturated_fat",
                  "status":"known",
                  "title":"Saturated fat in high quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"d",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":28,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3184030003389",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/318/403/000/3389/front_fr.3.200.jpg",
      "product_display_name":"Emmental Rapé – Paysan Breton",
      "url":"https://world.openfoodfacts.org/product/3184030003389/emmental-rape-paysan-breton"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"26036274",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/000/002/603/6274/front_fr.4.200.jpg",
      "product_display_name":"Mini lapin chocolat au lait",
      "url":"https://world.openfoodfacts.org/product/26036274/mini-lapin-chocolat-au-lait"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Very high environmental impact",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-e.svg",
                  "id":"ecoscore",
                  "match":18,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"known",
                  "title":"Green-Score E"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5011013500680",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/501/101/350/0680/front_ro.5.200.jpg",
      "product_display_name":"Coffee Layered Liqueur – Sheridan's",
      "url":"https://world.openfoodfacts.org/product/5011013500680/coffee-layered-liqueur-sheridan-s"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5000169214046",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/500/016/921/4046/front_en.3.200.jpg",
      "product_display_name":"Crunchy & Golden Breaded Haddock Fillets – Waitrose",
      "url":"https://world.openfoodfacts.org/product/5000169214046/crunchy-golden-breaded-haddock-fillets-waitrose"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Missing data to compute the Nutri-Score",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg",
                  "id":"nutriscore",
                  "match":0,
                  "name":"Nutri-Score",
                  "panel_id":"nutriscore_2023",
                  "status":"unknown",
                  "title":"Nutri-Score unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-salt-unknown.svg",
                  "id":"low_salt",
                  "missing":"Missing nutrition facts",
                  "name":"Salt",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Salt in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-fat-unknown.svg",
                  "id":"low_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Fat in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-sugars-unknown.svg",
                  "id":"low_sugars",
                  "missing":"Missing nutrition facts",
                  "name":"Sugars",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Sugars in unknown quantity"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nutrient-level-saturated-fat-unknown.svg",
                  "id":"low_saturated_fat",
                  "missing":"Missing nutrition facts",
                  "name":"Saturated fat",
                  "panel_id":"nutrition_facts_table",
                  "status":"unknown",
                  "title":"Saturated fat in unknown quantity"
               }
            ],
            "id":"nutritional_quality",
            "name":"Nutritional quality"
         },
         {
            "attributes":[
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/gluten-content-unknown.svg",
                  "id":"allergens_no_gluten",
                  "name":"Gluten",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Gluten"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/milk-content-unknown.svg",
                  "id":"allergens_no_milk",
                  "name":"Milk",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Milk"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/eggs-content-unknown.svg",
                  "id":"allergens_no_eggs",
                  "name":"Eggs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Eggs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nuts-content-unknown.svg",
                  "id":"allergens_no_nuts",
                  "name":"Nuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Nuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/peanuts-content-unknown.svg",
                  "id":"allergens_no_peanuts",
                  "name":"Peanuts",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Peanuts"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sesame-seeds-content-unknown.svg",
                  "id":"allergens_no_sesame_seeds",
                  "name":"Sesame seeds",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sesame seeds"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/soybeans-content-unknown.svg",
                  "id":"allergens_no_soybeans",
                  "name":"Soybeans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Soybeans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/celery-content-unknown.svg",
                  "id":"allergens_no_celery",
                  "name":"Celery",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Celery"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/mustard-content-unknown.svg",
                  "id":"allergens_no_mustard",
                  "name":"Mustard",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Mustard"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/lupin-content-unknown.svg",
                  "id":"allergens_no_lupin",
                  "name":"Lupin",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Lupin"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fish-content-unknown.svg",
                  "id":"allergens_no_fish",
                  "name":"Fish",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Fish"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/crustaceans-content-unknown.svg",
                  "id":"allergens_no_crustaceans",
                  "name":"Crustaceans",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Crustaceans"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/molluscs-content-unknown.svg",
                  "id":"allergens_no_molluscs",
                  "name":"Molluscs",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Molluscs"
               },
               {
                  "debug":"missing ingredients list",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/sulphur-dioxide-and-sulphites-content-unknown.svg",
                  "id":"allergens_no_sulphur_dioxide_and_sulphites",
                  "name":"Sulphur dioxide and sulphites",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Presence unknown: Sulphur dioxide and sulphites"
               }
            ],
            "id":"allergens",
            "name":"Allergens",
            "warning":"There is always a possibility that data about allergens may be missing, incomplete, incorrect or that the product's composition has changed. If you are allergic, always check the information on the actual product packaging."
         },
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Food processing level unknown",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/nova-group-unknown.svg",
                  "id":"nova",
                  "match":0,
                  "name":"NOVA group",
                  "panel_id":"nova",
                  "status":"unknown",
                  "title":"NOVA not computed"
               },
               {
                  "description":"",
                  "description_short":"",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/additives-unknown.svg",
                  "id":"additives",
                  "match":0,
                  "missing":"Missing ingredients list",
                  "name":"Additives",
                  "panel_id":"additives",
                  "status":"unknown",
                  "title":"Additives not computed"
               }
            ],
            "id":"processing",
            "name":"Food processing"
         },
         {
            "attributes":[
               {
                  "description":"",
                  "description_short":"Unknown environmental impact",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/green-score-unknown.svg",
                  "id":"ecoscore",
                  "match":0,
                  "name":"Green-Score",
                  "panel_id":"environmental_score",
                  "status":"unknown",
                  "title":"Green-Score not computed"
               },
               {
                  "description":"",
                  "description_short":"Currently only for products with chicken or eggs",
                  "grade":"e",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/forest-footprint-not-computed.svg",
                  "id":"forest_footprint",
                  "match":0,
                  "name":"Forest footprint",
                  "status":"known",
                  "title":"Forest footprint not computed"
               }
            ],
            "id":"environment",
            "name":"Environment"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openfoodfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3276170012250",
      "image_front_small_url":"https://images.openfoodfacts.org/images/products/327/617/001/2250/front_fr.3.200.jpg",
      "product_display_name":"Râpé de la Mer – Coraya",
      "url":"https://world.openfoodfacts.org/product/3276170012250/rape-de-la-mer-coraya"
   }
]
;
var product_type = "food";
</script>
<script src="https://static.openfoodfacts.org/js/product-preferences.js"></script>
<script src="https://static.openfoodfacts.org/js/product-search.js"></script>

<script>
$(document).foundation({
	equalizer : {
		equalize_on_stack: true
	},
	accordion: {
		callback : function (accordion) {
			$(document).foundation('equalizer', 'reflow');
		}
	}
});

</script>
<script type="application/ld+json">
{
	"@context" : "https://schema.org",
	"@type" : "WebSite",
	"name" : "Open Food Facts",
	"url" : "https://world.openfoodfacts.org",
	"potentialAction": {
		"@type": "SearchAction",
		"target": "https://world.openfoodfacts.org/cgi/search.pl?search_terms=?{search_term_string}",
		"query-input": "required name=search_term_string"
	}
}
</script>
<script type="application/ld+json">
{
	"@context": "https://schema.org/",
	"@type": "Organization",
	"url": "https://world.openfoodfacts.org",
	"logo": "https://static.openfoodfacts.org/images/logos/off-logo-vertical-light.svg",
	"name": "Open Food Facts",
	"sameAs" : ["https://www.facebook.com/OpenFoodFacts?utm_source=off&utf_medium=web", "https://x.com/OpenFoodFacts"]
}
</script>





</body>
</html>

<!-- data_debug: data_debug start
platform: public
can_use_cache: 1
cache_miss
platform: public
can_use_cache: 1
cache_miss
no_off_query: 
off_query: 
platform: public
query_url: http://10.1.0.103:16001
can_use_off_query: 1
count tags using off_query
set_cache_results: updated
off_query parameter not set, or not sorting by popularity_key: not using off_query
got results from MongoDB
set_cache_results: updated
-->

<!-- end templates/web/common/site_layout.tt.html -->

  recorded_at: Sun, 15 Jun 2025 21:21:40 GMT
recorded_with: VCR 6.3.1
